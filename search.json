[
  {
    "objectID": "content/rmarkdown.html",
    "href": "content/rmarkdown.html",
    "title": "R Markdown",
    "section": "",
    "text": "You can include R Markdown files in your project."
  },
  {
    "objectID": "content/rmarkdown.html#r-markdown",
    "href": "content/rmarkdown.html#r-markdown",
    "title": "R Markdown",
    "section": "R Markdown",
    "text": "R Markdown\nThis is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.\nWhen you click the Knit button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:\n\nsummary(cars)\n\n     speed           dist       \n Min.   : 4.0   Min.   :  2.00  \n 1st Qu.:12.0   1st Qu.: 26.00  \n Median :15.0   Median : 36.00  \n Mean   :15.4   Mean   : 42.98  \n 3rd Qu.:19.0   3rd Qu.: 56.00  \n Max.   :25.0   Max.   :120.00"
  },
  {
    "objectID": "content/rmarkdown.html#including-plots",
    "href": "content/rmarkdown.html#including-plots",
    "title": "R Markdown",
    "section": "Including Plots",
    "text": "Including Plots\nYou can also embed plots, for example:\n\n\n\n\n\nNote that the echo = FALSE parameter was added to the code chunk to prevent printing of the R code that generated the plot."
  },
  {
    "objectID": "content/rendering.html",
    "href": "content/rendering.html",
    "title": "Rendering",
    "section": "",
    "text": "The repo includes a GitHub Action that will render (build) the website automatically when you make changes to the files. It will be pushed to the gh-pages branch.\nBut when you are developing your content, you will want to render it locally."
  },
  {
    "objectID": "content/rendering.html#step-1.-make-sure-you-have-a-recent-rstudio",
    "href": "content/rendering.html#step-1.-make-sure-you-have-a-recent-rstudio",
    "title": "Rendering",
    "section": "Step 1. Make sure you have a recent RStudio",
    "text": "Step 1. Make sure you have a recent RStudio\nHave you updated RStudio since about August 2022? No? Then update to a newer version of RStudio. In general, you want to keep RStudio updated and it is required to have a recent version to use Quarto."
  },
  {
    "objectID": "content/rendering.html#step-2.-clone-and-create-rstudio-project",
    "href": "content/rendering.html#step-2.-clone-and-create-rstudio-project",
    "title": "Rendering",
    "section": "Step 2. Clone and create RStudio project",
    "text": "Step 2. Clone and create RStudio project\nFirst, clone the repo onto your local computer. How? You can click File &gt; New Project and then select “Version Control”. Paste in the url of the repository. That will clone the repo on to your local computer. When you make changes, you will need to push those up."
  },
  {
    "objectID": "content/rendering.html#step-3.-render-within-rstudio",
    "href": "content/rendering.html#step-3.-render-within-rstudio",
    "title": "Rendering",
    "section": "Step 3. Render within RStudio",
    "text": "Step 3. Render within RStudio\nRStudio will recognize that this is a Quarto project by the presence of the _quarto.yml file and will see the “Build” tab. Click the “Render website” button to render to the _site folder.\nPreviewing: You can either click index.html in the _site folder and specify “preview in browser” or set up RStudio to preview to the viewer panel. To do the latter, go to Tools &gt; Global Options &gt; R Markdown. Then select “Show output preview in: Viewer panel”."
  },
  {
    "objectID": "content/customizing.html",
    "href": "content/customizing.html",
    "title": "Customization",
    "section": "",
    "text": "Quarto allow many bells and whistles to make nice output. Read the documentation here Quarto documentation."
  },
  {
    "objectID": "content/customizing.html#quarto-documentation",
    "href": "content/customizing.html#quarto-documentation",
    "title": "Customization",
    "section": "",
    "text": "Quarto allow many bells and whistles to make nice output. Read the documentation here Quarto documentation."
  },
  {
    "objectID": "content/customizing.html#examples",
    "href": "content/customizing.html#examples",
    "title": "Customization",
    "section": "Examples",
    "text": "Examples\nLooking at other people’s Quarto code is a great way to figure out how to do stuff. Most will have a link to a GitHub repo where you can see the raw code. Look for a link to edit page or see source code. This will usually be on the right. Or look for the GitHub icon somewhere.\n\nQuarto gallery\nnmfs-openscapes\nFaye lab manual\nquarto-titlepages Note the link to edit is broken. Go to repo and look in documentation directory."
  },
  {
    "objectID": "content/publishing.html",
    "href": "content/publishing.html",
    "title": "Publishing",
    "section": "",
    "text": "To get your Quarto webpage to show up with the url\nyou have a few steps."
  },
  {
    "objectID": "content/publishing.html#turn-on-github-pages-for-your-repo",
    "href": "content/publishing.html#turn-on-github-pages-for-your-repo",
    "title": "Publishing",
    "section": "Turn on GitHub Pages for your repo",
    "text": "Turn on GitHub Pages for your repo\n\nTurn on GitHub Pages under Settings &gt; Pages . You will set pages to be made from the gh-pages branch and the root directory.\nTurn on GitHub Actions under Settings &gt; Actions &gt; General\n\nThe GitHub Action will automatically recreate your website when you push to GitHub after you do the initial gh-pages set-up"
  },
  {
    "objectID": "content/publishing.html#do-your-first-publish-to-gh-pages",
    "href": "content/publishing.html#do-your-first-publish-to-gh-pages",
    "title": "Publishing",
    "section": "Do your first publish to gh-pages",
    "text": "Do your first publish to gh-pages\nThe first time you publish to gh-pages, you need to do so locally.\n\nOn your local computer, open a terminal window and cd to your repo directory. Here is what that cd command looks like for me. You command will look different because your local repo will be somewhere else on your computer.\n\ncd ~/Documents/GitHub/NOAA-quarto-simple\n\nPublish to the gh-pages. In the terminal type\n\nquarto publish gh-pages\nThis is going to render your webpage and then push the _site contents to the gh-pages branch."
  },
  {
    "objectID": "content/publishing.html#dont-like-using-gh-pages",
    "href": "content/publishing.html#dont-like-using-gh-pages",
    "title": "Publishing",
    "section": "Don’t like using gh-pages?",
    "text": "Don’t like using gh-pages?\nIn some cases, you don’t want your website on the gh-pages branch. For example, if you are creating releases and you want the website pages archived in that release, then you won’t want your website pages on the gh-pages branch.\nHere are the changes you need to make if you to avoid gh-pages branch.\n\nAt the top of _quarto.yml add the following:\n\nproject: \n  type: website\n  output-dir: docs\n\nOn GitHub under Settings &gt; Pages set pages to be made from the main branch and the docs directory.\nMake sure docs is not listed in .gitignore\nPublish the site the first time locally using quarto publish from the terminal\nChange the GitHub Action because you can’t use quarto publish gh-pages. You’ll need to push to the main branch yourself (in the GitHub Action)\n\non:\n  push:\n    branches: main\n\nname: Render and Publish\n\njobs:\n  build-deploy:\n    runs-on: ubuntu-latest\n    env:\n      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}\n\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v2 \n        \n      - name: Set up R (needed for Rmd)\n        uses: r-lib/actions/setup-r@v2\n\n      - name: Install packages (needed for Rmd)\n        run: Rscript -e 'install.packages(c(\"rmarkdown\", \"knitr\", \"jsonlite\"))'\n\n      - name: Set up Quarto\n        uses: quarto-dev/quarto-actions/setup@v2\n        with:\n          # To install LaTeX to build PDF book \n          # tinytex: true \n          # uncomment below and fill to pin a version\n          # version: 0.9.600\n      \n      - name: Render Quarto Project\n        uses: quarto-dev/quarto-actions/render@v2\n        with:\n          to: html\n\n      - name: Set up Git\n        run: |\n          git config --local user.email \"actions@github.com\"\n          git config --local user.name \"GitHub Actions\"\n\n      - name: Commit all changes and push\n        run: |\n          git add -A && git commit -m 'Build site' || echo \"No changes to commit\"\n          git push origin || echo \"No changes to commit\""
  },
  {
    "objectID": "content/getting_started.html",
    "href": "content/getting_started.html",
    "title": "Getting started",
    "section": "",
    "text": "This repository holds all the files we’ll use to introduce you to data science and it’s related tools (R, Rstudio, git). Over 2 sessions, our (ambitious) goals are to\nTo prepare for our first session"
  },
  {
    "objectID": "content/getting_started.html#concept-stuff",
    "href": "content/getting_started.html#concept-stuff",
    "title": "Getting started",
    "section": "Concept stuff",
    "text": "Concept stuff\n\nDownload/save this presentation that we’ll work through\n\nhttps://docs.google.com/presentation/d/1WK3d1Exmsgj_Qi83mT2Pe7xthQzewfvSuOJeLyVkBmw/edit?usp=sharing\n\nWatch this video\nDo this survey so I know where we are starting\n\nhttps://forms.gle/7mYCnbRPFejrnpuXA"
  },
  {
    "objectID": "content/getting_started.html#tech-stuff",
    "href": "content/getting_started.html#tech-stuff",
    "title": "Getting started",
    "section": "Tech stuff",
    "text": "Tech stuff\n\nRequired (this gets everyone to class ready to go)\n\nGet access to R!. You can make an account at Rstudio cloud (https://rstudio.cloud/). You can also install R (https://cran.r-project.org/) and Rstudio (https://www.rstudio.com/) on your machine, but I strongly recommend starting with Rstudio cloud.\nRstudio cloud is free for up to 25 hours/month, you don’t have to maintain it, and it gives gives a standard install (same on all machines, so your intro/ our training may be smoother). You can also do both. If you need help, videos are at :\n\nDownloading R\nDownloading Rstudio\nMaking a Rstudio cloud account\n\nJoin the github classroom we’ll be using for our sessions\n\nhttps://classroom.github.com/a/D7Pmx_95\nWhen you visit the page it will ask you to connect or create a github repository. You can use any name (be anonymous or not) that you want. This is a free process.\n\n\n\n\nOptional (get a head start if you want)\nIt may be easier to open these intructions in a browser so you can follow along there while working in Rstudio!\nAfter you join the github classroom, you’ll make a clone of the repository onto your machine. First, find your copy of the repository. You can follow the github classroom link again, or log into github and then visit https://github.com/settings/repositories. Find the repository called data_science_intro_YOURGITHUBUSERNAME, and click on it. Then follow along below - find instructions for Rstudio cloud or Rstudio desktop depending on your setup.\n\nIf you are using Rstudio cloud…\nVideo at Accepting your first github repository (from github classroom) and cloning to Rstudio cloud\nLog into your Rstudio cloud account. You’ll see something like this:\n\n\n\nRstudio cloud home screen\n\n\nTo copy a repository, select New Project, New Project from Github repo. Next you’ll need to enter the url for your repository. To find this, click on the Code button from the github page for your repository (instructions above!)\n\n\n\nClick on Code to get repository url\n\n\nCopy the web url (or click the copy icon). Input that into the field asking for the URL of your github repository.\nNote you may need to enter your github username and password to create the repository.\nThe next screen will bring you to a “normal” RStudio screen. Continue to the Now we can actually work in R section to get started\n\n\nIf you are using RStudio on your desktop (or via a server…anywhere that\nlooks like an RStudio screen)\nVideo at Accepting your first github repository (from github classroom) and cloning to Rstudio desktop\nTo start working on an assignment, open RStudio.\n\n\n\nSelect File &gt; New Project in Rstudio\n\n\nSelect file, new project, Version control. On the next screen select git. If this isn’t available, you may need to install git (free) on your system. You can download it at https://git-scm.com/download/.\nNext you’ll need to enter the url for your repository. To find this, click on the Code button from the github page for your repository (instructions above!).\n\n\n\nClick on Code to get repository url\n\n\nCopy the web url (or click the copy icon). Input that into the Rstudio Repository URL space. You can select/edit what you want the repository to be called and where its stored (its just a folder on your computer). For example, I have a Repositories folder in my main hard drive where I save all of these. Then select Create project. Whatever you choose, the project will be saved in new folder in that location using the name you chose. Note you may need to enter your github username and password to create the repository.\nYou also may get an error/warning about personal access token! this happens at different points on different machines (thus why Rstudio cloud is nice). If you see this now, see below for help.\nIf everything work, the next screen will bring you to a “normal” RStudio screen.\nContinue to the Now we can actually work in R section to get started\n\n\nNow we can actually work in R and markdown\nNow you can start working on the files in the repository in Rstudio. To view the files, make sure you are in the right repository. You should see whatever you named the project in the upper right hand corner of Rstudio. If you don’t go to File &gt; Open Project and navigate to where you placed the repository.\nOnce you are in the right project, open the file you want to work on. From inside the project space, go to File, Open File and find it, or look in the Files window to find and open the file.\nFor example, we’ll start our R work with the 1_intro_to_R_and_stats_primer.R file in the Training folder. Open the file, and a window with a lot of text should appear in your Rstudio.\n\n\nEditing, committing, and pushing changes\nTo understand how git works, change line 2 of the 1_intro_to_R_and_stats_primer.R to have your name. Then hit save (disk icon). This saves a copy of the file on your machine. In order for me to see it, we need to push those changes to a github repository.\n\n\nCommitting files to your github repository\nIf you look in the upper right windows, you should see a Git tab. Select it.\n\n\n\nThe git tab allows you to use git commands in Rstudio\n\n\nNotice it has several files. These are the files you have changed or created since you started working. Click the checkbox next to the files, and select Commit. You’ll need to enter a description. Put “My first commit!” and press Commit.\nIf you get a screen that looks like this:\n\n\n\nThis screen means you need to tell your computer who to assign changes to\n\n\nIt just means we need to associate an identity with the commits. To do this, close (x) the git windows. Select the terminal tab:\n\n\n\nThe terminal tab lets you send commands to your computer\n\n\nThen paste this line into the terminal (tab to the right of the console tab), (note you need 2 – should be 2 dashes!)\ngit config –global user.email “you@example.com”\nreplace the email with your email (leave the quotes) and press enter.\nThen paste this line into the terminal,\ngit config –global user.name “Your Name”\nreplace the Your Name with your name (leave the quotes) and press enter.\nNow go back to the git window and try the commit again. It should work. You will only have to do this once (for desktop versions) and only occasionally for cloud-based RStudio instances.\nNow you’ve committed to the file to your local Rstudio instance (on your own machine or server), which is itself a git repository. This is different than a save. A save overwites the current file, while a commit compares changes you have made and tracks them. To see this, you can go the Git tab, select Diff, and then History on the pop-you. From there, you can select the commit, select any file you committed, and actually see the changes. This allows you to go back to (or just see) earlier versions easily, which is often helpful in programming.\n\n\nPushing to github\nNow you need to push these changes to the cloud so I can see them (or, in the future, so you could share with collaborators or save a copy for yourself). From the Git tab, select Push. As of Fall 2021, Github no longer accepts usernames and passwords for authentication. However, Rstudio may ask you for these depending on what version you are using. Don’t be surprised if you enter your password correctly but your attempt to create a repository (or push commits to it) still fails because you need to setup or reset a token.\n\n\n\nIf you see this, it means you need to setup or reauthorize a github token\n\n\nIf you see this message now, go to the Github 2-factor authentication (required as of Fall 2021) section!). If not, you can continue, but note you’ll have to do it later (when you push changes).\n\n\nGithub 2-factor authentication (required as of Fall 2021)\nGithub requires you to use a token to verify you have permission to make changes to repositoties that you store there. To create a token, can use the code below. If this file is open in R, you can select the green triangle button (play icon) to run the current chunk. Otherwise you can copy and paste it into R. Note you may also need to install the usethis library first.\n\nlibrary(usethis)\nusethis::create_github_token()\n\nThis will launch a browser pointed to github. You may need to log in. Then it will have you name a PAT (personal access token). You can, for example, name it Rstudio. Then scroll to the bottom, and select Generate Token. Save the token somewhere (you’ll never see it again once you close the window). Then run the next code chunk. Select 3, then paste in the token you just generated. Again, you may need to install the gitcreds package.\n\nlibrary(gitcreds)\ngitcreds_set()\n\nThis process is letting your computer and github communicate and should only need to be done once for a desktop. For rstudio.cloud, you will need to regularly reenter the token, but you don’t have to recreate it. So save you PAT somewhere just in case. If/when you lose it, however, you can simply make a new one and reconnect the repositories.\nOnce you enter your git credentials, try to push your changes again. It should work this time. A window should appear. When it’s done (white text shows) go to your github repository (on the web). Open the folder for this assignment and click on the .md file. It should preview, and you should see the updated file with your name! Congratulations!\nAs you work, use commits to save snapshots of your work in a version control manner, and pushes to share them. If you get stuck, you can also push your file up so I can see it and help you fix it (much better than “My code isn’t working). Then you can actually see”how” I fixed it. The code will also be useful for assessments.\n\n\n\nExtra resources\n\nEasy (but no longer updated) intro to R\n\nYaRrr! The Pirate’s Guide to R\nThis is produced using rmarkdown!\n\nMy stat class\n\nhttps://sites.google.com/view/biostats/home\nswirl (R tutorials), books, etc\n\n\nNeed help? Contact me (stephen.gosnell@baruch.cuny.edu):"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Biostatistics book title",
    "section": "",
    "text": "This site is a work in progress! Original .R and .rmd files from are being migrated into a new book using quarto.\n\nAnother statistics book?\nThe course focuses on teaching introductory statistics from a biological perspective, so examples, papers, and problems focus on natural systems when possible.\nThe class now includes\n\nwebsite housing slides and associated material\ntutorials for many lessons using Swirl\n\ndeveloped with support of a QUBES working group\n\nthis book!"
  },
  {
    "objectID": "content/code.html",
    "href": "content/code.html",
    "title": "Rendering with Code",
    "section": "",
    "text": "You can have code (R, Python or Julia) in your qmd file. You will need to have these installed on your local computer, but presumably you do already if you are adding code to your qmd files.\nx &lt;- c(5, 15, 25, 35, 45, 55)\ny &lt;- c(5, 20, 14, 32, 22, 38)\nlm(x ~ y)\n\n\nCall:\nlm(formula = x ~ y)\n\nCoefficients:\n(Intercept)            y  \n      1.056        1.326"
  },
  {
    "objectID": "content/code.html#modify-the-github-action",
    "href": "content/code.html#modify-the-github-action",
    "title": "Rendering with Code",
    "section": "Modify the GitHub Action",
    "text": "Modify the GitHub Action\nYou will need to change the GitHub Action in .github/workflows to install these and any needed packages in order for GitHub to be able to render your webpage. The GitHub Action install R since I used that in code.qmd. If you use Python or Julia instead, then you will need to update the GitHub Action to install those.\nIf getting the GitHub Action to work is too much hassle (and that definitely happens), you can alway render locally and publish to the gh-pages branch. If you do this, make sure to delete or rename the GitHub Action to something like\nrender-and-publish.old_yml\nso GitHub does not keep trying to run it. Nothing bad will happen if you don’t do this, but if you are not using the action (because it keeps failing), then you don’t need GitHub to run it."
  },
  {
    "objectID": "content/code.html#render-locally-and-publish-to-gh-pages-branch",
    "href": "content/code.html#render-locally-and-publish-to-gh-pages-branch",
    "title": "Rendering with Code",
    "section": "Render locally and publish to gh-pages branch",
    "text": "Render locally and publish to gh-pages branch\nTo render locally and push up to the gh-pages branch, open a terminal window and then cd to the directory with the Quarto project. Type this in the terminal:\nquarto render gh-pages"
  },
  {
    "objectID": "content/add-content.html",
    "href": "content/add-content.html",
    "title": "Customize",
    "section": "",
    "text": "Edit the qmd or md files in the content folder. qmd files can include code (R, Python, Julia) and lots of Quarto markdown bells and whistles (like call-outs, cross-references, auto-citations and much more).\ntest\ntest\nEach page should start with\n---\ntitle: your title\n---\nand the first header will be the 2nd level, so ##. Note, there are situations where you leave off\n---\ntitle: your title\n---\nand start the qmd file with a level header #, but if using the default title yaml (in the --- fence) is a good habit since it makes it easy for Quarto convert your qmd file to other formats (like into a presentation)."
  },
  {
    "objectID": "content/add-content.html#edit-and-add-your-pages",
    "href": "content/add-content.html#edit-and-add-your-pages",
    "title": "Customize",
    "section": "",
    "text": "Edit the qmd or md files in the content folder. qmd files can include code (R, Python, Julia) and lots of Quarto markdown bells and whistles (like call-outs, cross-references, auto-citations and much more).\ntest\ntest\nEach page should start with\n---\ntitle: your title\n---\nand the first header will be the 2nd level, so ##. Note, there are situations where you leave off\n---\ntitle: your title\n---\nand start the qmd file with a level header #, but if using the default title yaml (in the --- fence) is a good habit since it makes it easy for Quarto convert your qmd file to other formats (like into a presentation)."
  },
  {
    "objectID": "content/add-content.html#add-your-pages-the-project",
    "href": "content/add-content.html#add-your-pages-the-project",
    "title": "Customize",
    "section": "Add your pages the project",
    "text": "Add your pages the project\n\nAdd the files to _quarto.yml"
  },
  {
    "objectID": "content/1b_intro_to_Rmd.html",
    "href": "content/1b_intro_to_Rmd.html",
    "title": "1b. Intro to Rmd files and literate programming",
    "section": "",
    "text": "Rmd files differ from R files in that they combine regular text with code chunks. This is a code chunk\n\nprint(\"this is a chunk\")\n\n[1] \"this is a chunk\"\n\n\nCode chunks combine code with output. When combined with regular text/prose, this makes it easier to produce a range of documents. You set the output in the YAML header (the stuff between the 3 dashes you see at top of this document).\nAfter you write the file, you Knit it to turn the Rmd file into the selected output. Try it now. Note the first time you do this in a project you may be prompted to install a number of packages! If you are using a webservice you may also need to allow pop-ups in your browser. Don’t be surprised if a new window pops up (it should).\n\n\n\nThe knit button turns your .rmd file into other products\n\n\nThe Knit button saves the .Rmd file and renders a new version whose output depends on what you selected in the header. Here we have html_document, so if everything works a preview of a webpage like document should appear. The file also produces a github friendly .md file. This means you should only edit the Rmd file (leave the md and output files alone! They are automatically produced any changes you make there will be overwritten by your next knit).\nWhen you Knit a file, it runs in a totally new R instance. this means anything you only added in your instance (like working in the console) won’t be available. In other words, its the best way to see what a “new” user gets when they use your code.\nhowever, you don’t have to knit the file every time. if you just want to see output, note you can press the green button next to an R chunk.\n\n\n\nThe green arrows just runs the chunk in the console and shows the output\n\n\n\nprint(\"this is a chunk\")\n\n[1] \"this is a chunk\"\n\n\nNow we’ll start changing the file to show you how rmarkdown works. First, amend the file by replacing the NAME and DATE spots in the header (top of the file between the — markers) with your name and the real date. Then Knit the file again. You should see your name in the new preview.\nRstudio has a Markdown Quick Reference guide (look under the help tab), but some general notes.\n\nPound/Hashtag signs denote headers\nyou can surround something double asterisks for bold or single asterisks for italics\nlists are denoted by numbers or asterisks at beginning of line (followed by space!)\n\nand can be indented for sublevels\n\nR code can be done inline, but is generally placed in stand-alone chunks\n\nthese will, by default, show the code and output\n\nlots of other options exist!\n\nThe main idea is Rmd files allow you to combine code, text, graphs, etc into multiple outputs that you can share (including with coding illiterate colleagues who just want output)."
  },
  {
    "objectID": "content/summarizing_data.html",
    "href": "content/summarizing_data.html",
    "title": "Summarizing data",
    "section": "",
    "text": "At its heart, statistics is about turning data into information that we can use to make decisions or better understand the world around us. Statistics generally give us estimates about how the real world works. Put another way, if we knew everything about the world, we wouldn’t need to use statistics because we wouldn’t need estimates.\nThe reasons we don’t usually know everything include\n\nthe world is complicated (some questions can’t be directly tested)\nit’s not possible to measure everything\n\nThink about it this way. We want to know if several species of iris (Iris versicolor and *Iris setosa)\nWe generally want to know something about a population. Since measuring the entire population may not be possible (too expensive, or in ecology you may not know if you measured the whole population), we generally sample the population. This means we measure a trait/characteristic (or multiple traits/characteristics)\n#plots from 1. Intro.ppt#### iris\n#base histograms#### #note hist is odd with cex label_size &lt;- 2 title_size &lt;- 2.5\npar(mar = c(7,7,7,7)) #if you get an error about “figure margins too large”, reset this to par(mar = c(rep(5,4))) #this is just issue with trying to size figures for lecture slides #may also have issues with some images…\nhist(iris$Sepal.Length, main = “Sepal Lengths”, xlab = “Sepal Length (cm)”, cex.lab=label_size, cex.axis=label_size, cex.main=title_size, cex.sub=label_size, col = “blue”)\n#skewed left#### birds &lt;- rbeta(10000,70,5) hist(birds, main=“Weight of Westchester cardinals”, xlab = “Weight (g)”, ylab = “Frequency (#)”, col = “red”, cex.lab=label_size, cex.axis=1.25, cex.main=title_size, cex.sub=label_size)\n#normal data#### putnam &lt;- c(rnorm(1000,20,4)) hist(putnam, main=“Weight of Westchester parrots”, xlab = “Weight (g)”, ylab = “Frequency (#)”, col = “green”, cex.lab=label_size, cex.axis=1.25, cex.main=title_size, cex.sub=label_size)\n#uniform data#### putnam &lt;- c(runif(1000,.1,8)) hist(putnam, main=“Weight of Westchester Robins”, xlab = “Weight (g)”, ylab = “Frequency (#)”, col = “Pink”, cex.lab=label_size, cex.axis=1.25, cex.main=title_size, cex.sub=label_size)\n#skewed right#### birds &lt;- rbeta(10000,2,12) hist(birds, main=“Weight of Westchester Blue Jays”, xlab = “Weight (g)”, ylab = “Frequency (#)”, col = “blue”, cex.lab=label_size, cex.axis=1.25, cex.main=title_size, cex.sub=label_size)\n#bimodal data#### putnam &lt;- c(rnorm(100,20,4),rnorm(100,40,4)) hist(putnam, main=“Weight of Westchester woodpeckers”, xlab = “Weight (g)”, ylab = “Frequency (#)”, col = “orange”, cex.lab=label_size, cex.axis=1.25, cex.main=title_size, cex.sub=label_size)\n#add density overlay to histograms#### hist(iris\\(Sepal.Length, main = \"Sepal Lengths\",  xlab = \"Sepal Length (cm)\", cex.lab=label_size, cex.axis=label_size,  cex.main=title_size, cex.sub=label_size, col = \"blue\", prob = T) lines(density(iris\\)Sepal.Length), col = “red”) # add a density estimate with defaults\n#normal data with density overly and true normal##### putnam &lt;- c(rnorm(1000,20,4)) hist(putnam, main=“Weight of Westchester parrots”, xlab = “Weight (g)”, ylab = “Frequency (#)”, col = “green”, cex.lab=label_size, cex.axis=1.25, cex.main=title_size, cex.sub=label_size, probability = T) lines(density(putnam), col = “black”) # add a density estimate with defaults curve(dnorm(x, mean=20, sd=4), col=“darkblue”, lwd=2, add=TRUE, yaxt=“n”)\n#bar charts for categorical data#### head(USArrests) names(USArrests) USArrests\\(State &lt;- as.factor(rownames(USArrests)) par(las=2) barplot(USArrests\\)Murder, names.arg = USArrests$State, cex.lab=label_size, cex.axis=label_size, cex.main=title_size, cex.sub=label_size, col = “blue”, main = “Murder Arrests per 100,000 since 1973”) write.csv(USArrests, “USArrests.csv”, row.names = F)\nwrite.csv(iris, “iris.csv”, row.names = F)\n#bar chart issues#### #auto breaks#### hist(iris\\(Sepal.Length, main = \"Sepal Lengths, auto breaks with R\",  xlab = \"Sepal Length (cm)\", cex.lab=label_size, cex.axis=label_size,  cex.main=title_size, cex.sub=label_size, col = \"blue\") #counts of auto breaks#### x =hist(iris\\)Sepal.Length, main = “Sepal Lengths, auto breaks with R”, xlab = “Sepal Length (cm)”, cex.lab=label_size, cex.axis=label_size, cex.main=title_size, cex.sub=label_size) plot(x\\(breaks[-9], x\\)counts, main = “Sepal Lengths, auto breaks with R”, xlab = “Sepal Length (cm)”, ylab = “Frequency”, cex.lab=label_size, cex.axis=1.5, cex.main=title_size, cex.sub=label_size, col=“blue”, pch = 16, cex = 3) #setting own breaks#### hist(iris\\(Sepal.Length, breaks=3, main = \"Sepal length histogram, 3 breaks\",  xlab = \"Sepal Length (cm)\", cex.lab=label_size, cex.axis=label_size,  cex.main=title_size, cex.sub=label_size, col = \"blue\") hist(iris\\)Sepal.Length, breaks=10, main = “Sepal length histogram, 10 breaks”, xlab = “Sepal Length (cm)”, cex.lab=label_size, cex.axis=label_size, cex.main=title_size, cex.sub=label_size, col = “blue”)\n#boxplot versicolor#### #need to use ggplot2 for ease (will get to this later and typically use it) library(ggplot2) ggplot(iris[iris$Species == “versicolor”,], aes(Species,Sepal.Length)) + geom_boxplot(aes(colour=Species), size = 3) + ylab(“Sepal Length (cm)”)+ggtitle(“Sepal Length of Iris versicolor”)+ xlab(““) + theme(axis.title.x = element_text(face=”bold”, size=28), axis.title.y = element_text(face=“bold”, size=28), axis.text.y = element_text(size=20), axis.text.x = element_text(size=0), legend.text =element_text(size=20), legend.title = element_text(size=20, face=“bold”), plot.title = element_text(hjust = 0.5, face=“bold”, size=32))\n#data from multiple groups#### #barchart #### # #load function from Rmisc library(Rmisc)\n#now use function_output &lt;- summarySE(iris, measurevar=“Sepal.Length”, groupvars = c(“Species”))\nggplot(function_output, aes(x=Species, y=Sepal.Length)) + geom_col(aes(fill=Species), size = 3) + ylab(“Sepal Length (cm)”)+ggtitle(“Sepal Length of various iris species”)+ theme(axis.title.x = element_text(face=“bold”, size=28), axis.title.y = element_text(face=“bold”, size=28), axis.text.y = element_text(size=20), axis.text.x = element_text(size=20), legend.text =element_text(size=20), legend.title = element_text(size=20, face=“bold”), plot.title = element_text(hjust = 0.5, face=“bold”, size=32))\n#scatterplot all species#### ggplot(iris, aes(Species,Sepal.Length)) + geom_point(aes(colour=Species), size = 3) + ylab(“Sepal Length (cm)”)+ggtitle(“Sepal Length of various iris species”)+ theme(axis.title.x = element_text(face=“bold”, size=28), axis.title.y = element_text(face=“bold”, size=28), axis.text.y = element_text(size=20), axis.text.x = element_text(size=20), legend.text =element_text(size=20), legend.title = element_text(size=20, face=“bold”), plot.title = element_text(hjust = 0.5, face=“bold”, size=32))\n#stacked histogram#### ggplot(iris, aes(Sepal.Length)) + geom_histogram(aes(fill=Species), size=3) + xlab(“Sepal Length (cm)”)+ ylab(“Frequency”)+ ggtitle(“Sepal Length of various iris species”)+ theme(axis.title.x = element_text(face=“bold”, size=28), axis.title.y = element_text(face=“bold”, size=28), axis.text.y = element_text(size=20), axis.text.x = element_text(size=20), legend.text =element_text(size=20), legend.title = element_text(size=20, face=“bold”), plot.title = element_text(hjust = 0.5, face=“bold”, size=32))\n#facetted stacked histogram#### ggplot(iris, aes(Sepal.Length)) + geom_histogram(aes(fill=Species), size=3) + xlab(“Sepal Length (cm)”)+ ylab(“Frequency”)+ ggtitle(“Sepal Length of various iris species”)+ theme(axis.title.x = element_text(face=“bold”, size=28), axis.title.y = element_text(face=“bold”, size=28), axis.text.y = element_text(size=20), axis.text.x = element_text(size=20), legend.text =element_text(size=20), legend.title = element_text(size=20, face=“bold”), legend.position = “bottom”, plot.title = element_text(hjust = 0.5, face=“bold”, size=32))+ facet_wrap(~Species, ncol = 1)\n#boxplot all species#### ggplot(iris, aes(Species,Sepal.Length)) + geom_boxplot(aes(colour=Species), size = 3) + ylab(“Sepal Length (cm)”)+ggtitle(“Sepal Length of various iris species”)+ theme(axis.title.x = element_text(face=“bold”, size=28), axis.title.y = element_text(face=“bold”, size=28), axis.text.y = element_text(size=20), axis.text.x = element_text(size=20), legend.text =element_text(size=20), legend.title = element_text(size=20, face=“bold”), plot.title = element_text(hjust = 0.5, face=“bold”, size=32))\n#cdf all species#### par(cex = 2) versi &lt;- ecdf(iris[iris\\(Species == \"versicolor\",\"Sepal.Length\"]) plot(versi, verticals = T, col = \"red\",  main = \"Cumulative frequency distribution of Sepal Length (cm)\",  xlab = \"Sepal length (cm)\", ylab = \"Cumulative relative frequencey\") seto &lt;- ecdf(iris[iris\\)Species == “setosa”,“Sepal.Length”]) plot(seto, add = T, col = “blue”, verticals = T) virg &lt;- ecdf(iris[iris$Species == “virginica”,“Sepal.Length”]) plot(virg, add = T, col = “orange”, verticals = T)\n#example of diverging, stacked, and mosaic graphs#### library(dplyr)\n\nlong-form vegetation survey data from\n\n\nhttp://luisdva.github.io/rstats/Diverging-bar-plots/\n\n\nthese data should more or less reflect the vegetation patterns at “Quebrada de Cordoba”, Chile\nvegSurvey &lt;- data.frame(sampling_point=rep(c(1:5),4), slope=c(rep(“North”,10),rep(“South”,10)), veg_Type=rep(c(rep(“native”,5),rep(“introduced”,5)),2), spp=as.integer(abs(rnorm(20,5,2)))) vegSurvey\\(spp &lt;- ifelse(vegSurvey\\)veg_Type ==“introduced”,vegSurvey\\(spp+1,vegSurvey\\)spp)\nvegSurvey &lt;- vegSurvey %&gt;% mutate(sppInv= ifelse(veg_Type ==“native”,spp,spp*-1))\n#grouped bar plot#### ggplot(vegSurvey, aes(x=sampling_point, y=spp)) + geom_bar(aes(fill=veg_Type), size = 3, stat = “identity”, position = position_dodge(width=0.5)) + ylab(“Frequency”) + xlab(“Sampling point”) + ggtitle(“Invasive and native species based on site”)+ scale_fill_manual(name=“Plant type”,values = c(“#FFA373”,“#50486D”)) + theme(axis.title.x = element_text(face=“bold”, size=28), axis.title.y = element_text(face=“bold”, size=28), axis.text.y = element_text(size=20), axis.text.x = element_text(size=20), legend.text =element_text(size=20), legend.title = element_text(size=20, face=“bold”), plot.title = element_text(hjust = 0.5, face=“bold”, size=32))\n#stacked bar plot#### ggplot(vegSurvey, aes(x=sampling_point, y=spp)) + geom_bar(aes(fill=veg_Type), size = 3, stat = “identity”) + ylab(“Frequency”)+ xlab(“Sampling point”)+ ggtitle(“Invasive and native species based on site”)+ scale_fill_manual(name=“Plant type”,values = c(“#FFA373”,“#50486D”)) + theme(axis.title.x = element_text(face=“bold”, size=28), axis.title.y = element_text(face=“bold”, size=28), axis.text.y = element_text(size=20), axis.text.x = element_text(size=20), legend.text =element_text(size=20), legend.title = element_text(size=20, face=“bold”), plot.title = element_text(hjust = 0.5, face=“bold”, size=32))\n#facetted stacked#### ggplot(vegSurvey, aes(x=sampling_point, y=spp)) + geom_bar(aes(fill=veg_Type), size = 3, stat = “identity”) + ylab(“Frequency”)+ xlab(“Sampling point”)+ ggtitle(“Invasive and native species based on site”)+ scale_fill_manual(name=“Plant type”,values = c(“#FFA373”,“#50486D”)) + theme(axis.title.x = element_text(face=“bold”, size=28), axis.title.y = element_text(face=“bold”, size=28), axis.text.y = element_text(size=20), axis.text.x = element_text(size=20), legend.text =element_text(size=20), legend.title = element_text(size=20, face=“bold”), plot.title = element_text(hjust = 0.5, face=“bold”, size=32)) + facet_wrap(~slope, nrow = 1)\n\n\ndivergent plot\nggplot(vegSurvey, aes(x=sampling_point, y=sppInv, fill=veg_Type))+ geom_bar(stat=“identity”,position=“identity”)+ xlab(“sampling point”)+ylab(“number of species”)+ scale_fill_manual(name=“Plant type”,values = c(“#FFA373”,“#50486D”))+ coord_flip()+ geom_hline(yintercept=0)+ xlab(“Sampling Points”)+ ylab(“Species number”)+ scale_y_continuous(breaks = pretty(vegSurvey\\(sppInv),labels = abs(pretty(vegSurvey\\)sppInv)))+ theme(strip.text.x = element_text(face = “bold”))\n\n\ndivergent plot with facetting by slope\nggplot(vegSurvey, aes(x=sampling_point, y=sppInv, fill=veg_Type))+ geom_bar(stat=“identity”,position=“identity”)+ facet_wrap(~slope)+xlab(“sampling point”)+ylab(“number of species”)+ scale_fill_manual(name=“Plant type”,values = c(“#FFA373”,“#50486D”))+ coord_flip()+ geom_hline(yintercept=0)+ xlab(“Sampling Points”)+ ylab(“Species number”)+ scale_y_continuous(breaks = pretty(vegSurvey\\(sppInv),labels = abs(pretty(vegSurvey\\)sppInv)))+ theme(strip.text.x = element_text(face = “bold”))\n#mosaic plot#### #for mosaic plots, need to use other package (ggmosaic) or add frequency column #for your choice variable\nlibrary(reshape2)\n#get total native/invasive per site vegSurvey_veg_per_site &lt;- dcast(vegSurvey, sampling_point+veg_Type~ “total_veg_per_site”, sum, value.var = “spp”) vegSurvey_per_site &lt;- dcast(vegSurvey, sampling_point ~ “total_per_site”, sum, value.var = “spp”) vegSurvey_veg_per_site &lt;- merge(vegSurvey_veg_per_site, vegSurvey_per_site) vegSurvey_veg_per_site\\(Proportion &lt;- vegSurvey_veg_per_site\\)total_veg_per_site/ vegSurvey_veg_per_site$total_per_site\nggplot(vegSurvey_veg_per_site, aes(x=sampling_point, y=Proportion)) + geom_bar(aes(fill=veg_Type), size = 3, stat = “identity”) + ylab(“Percent”) + xlab(“Sampling point”) + ggtitle(“Invasive and native species based on site”)+ scale_fill_manual(name=“Plant type”,values = c(“#FFA373”,“#50486D”)) + theme(axis.title.x = element_text(face=“bold”, size=28), axis.title.y = element_text(face=“bold”, size=28), axis.text.y = element_text(size=20), axis.text.x = element_text(size=20), legend.text =element_text(size=20), legend.title = element_text(size=20, face=“bold”), plot.title = element_text(hjust = 0.5, face=“bold”, size=32))\n#turn this into pie chart#### vegSurvey_veg_per_site\\(sampling_point &lt;- factor(vegSurvey_per_site\\)sampling_point) #have to make weird empty factor else you get concentric circles vegSurvey_veg_per_site$Share &lt;- “” ggplot(vegSurvey_veg_per_site, aes(x=Share, y=Proportion)) + geom_bar(aes(fill=veg_Type), size = 3, stat = “identity”) + ylab(“Frequency”) + xlab(“Sampling point”) + ggtitle(“Invasive and native species based on site”)+ scale_fill_manual(name=“Plant type”,values = c(“#FFA373”,“#50486D”)) + theme(axis.title.x = element_text(face=“bold”, size=28), axis.title.y = element_text(face=“bold”, size=28), axis.text.y = element_text(size=20), axis.text.x = element_text(size=20), legend.text =element_text(size=20), legend.title = element_text(size=20, face=“bold”), plot.title = element_text(hjust = 0.5, face=“bold”, size=32)) + coord_polar(theta=“y”) + facet_wrap(~sampling_point)\n#or (not in slides) cast to get single plot/split#### vegSurvey_veg_per_site_cast &lt;- dcast(vegSurvey_veg_per_site, veg_Type ~ “Proportion”, value.var = “Proportion”, mean)\nvegSurvey_veg_per_site_cast$Site &lt;- “”\nggplot(vegSurvey_veg_per_site_cast, aes(x=Site, y=Proportion)) + geom_bar(aes(fill=veg_Type), size = 3, stat = “identity”) + ylab(“Frequency”) + xlab(““) + ggtitle(”Overall composition of invasive and native species across sites”)+ scale_fill_manual(name=“Plant type”,values = c(“#FFA373”,“#50486D”)) + theme(axis.title.x = element_text(face=“bold”, size=28), axis.title.y = element_text(face=“bold”, size=28), axis.text.y = element_text(size=20), axis.text.x = element_text(size=20), legend.text =element_text(size=20), legend.title = element_text(size=20, face=“bold”), plot.title = element_text(hjust = 0.5, face=“bold”, size=32)) + coord_polar(theta=“y”)\n#mosaic plot facetted by slope#### vegSurvey_per_slope &lt;- dcast(vegSurvey, sampling_point + slope~ “total_per_slope”, sum, value.var = “spp”) vegSurvey &lt;- merge(vegSurvey, vegSurvey_per_slope) vegSurvey\\(Proportion &lt;- vegSurvey\\)spp/vegSurvey$total_per_slope\nggplot(vegSurvey, aes(x=sampling_point, y=Proportion)) + geom_bar(aes(fill=veg_Type), size = 3, stat = “identity”) + ylab(“Frequency”) + xlab(“Sampling point”) + ggtitle(“Invasive and native species based on slope”)+ scale_fill_manual(name=“Plant type”,values = c(“#FFA373”,“#50486D”)) + theme(axis.title.x = element_text(face=“bold”, size=28), axis.title.y = element_text(face=“bold”, size=28), axis.text.y = element_text(size=20), axis.text.x = element_text(size=20), legend.text =element_text(size=20), legend.title = element_text(size=20, face=“bold”), plot.title = element_text(hjust = 0.5, face=“bold”, size=32)) + facet_wrap(~slope, ncol=1)\n#numerical, numerical relationships #### # #scatter#### ggplot(iris, aes(y =Petal.Length,x =Sepal.Length)) + geom_point(aes(colour=Species), size = 3) + xlab(“Sepal Length (cm)”) + ylab(“Petal Length (cm)”) + ggtitle(“Relationship between sepal and petal lengths in irises”)+ theme(axis.title.x = element_text(face=“bold”, size=28), axis.title.y = element_text(face=“bold”, size=28), axis.text.y = element_text(size=20), axis.text.x = element_text(size=20), legend.text =element_text(size=20), legend.title = element_text(size=20, face=“bold”), plot.title = element_text(hjust = 0.5, face=“bold”, size=32))\n#data over time#### #use airquality dataset for time series # airquality\\(Date &lt;- as.Date(paste(airquality\\)Month, airquality$Day, sep=“/”), format =“%m/%d” )\n#just points#### ggplot(airquality, aes(x =Date,y =Temp)) + geom_point(size = 3, col = “orange”) + xlab(“Date”) + ylab(“Temperature (C)”) + ggtitle(“Temperature over time”)+ theme(axis.title.x = element_text(face=“bold”, size=28), axis.title.y = element_text(face=“bold”, size=28), axis.text.y = element_text(size=20), axis.text.x = element_text(size=20), legend.text =element_text(size=20), legend.title = element_text(size=20, face=“bold”), plot.title = element_text(hjust = 0.5, face=“bold”, size=32))\n#points and line#### ggplot(airquality, aes(x =Date,y =Temp)) + geom_point(size = 3, col = “orange”) + geom_line() + xlab(“Date”) + ylab(“Temperature (C)”) + ggtitle(“Temperature over time”)+ theme(axis.title.x = element_text(face=“bold”, size=28), axis.title.y = element_text(face=“bold”, size=28), axis.text.y = element_text(size=20), axis.text.x = element_text(size=20), legend.text =element_text(size=20), legend.title = element_text(size=20, face=“bold”), plot.title = element_text(hjust = 0.5, face=“bold”, size=32))\n#more than one axis#### #for 1:1 transformation data (anything you can use a function to make on a similar #scale) #can add easily but not get scale ggplot(airquality, aes(x =Date,y =Temp)) + geom_point(size = 3, col = “orange”) + geom_line() + geom_point(aes(y=Wind)) + xlab(“Date”) + ylab(“Temperature (C)”) + ggtitle(“Temperature over time”)+ theme(axis.title.x = element_text(face=“bold”, size=28), axis.title.y = element_text(face=“bold”, size=28), axis.text.y = element_text(size=20), axis.text.x = element_text(size=20), legend.text =element_text(size=20), legend.title = element_text(size=20, face=“bold”), plot.title = element_text(hjust = 0.5, face=“bold”, size=32))\n#manually scale data and get secondary axis #have to aes to make tranformation (not aes_string) #put colour in quotes in aes to force legend ggplot(airquality, aes(x =Date,y =Temp)) + geom_point(aes(col =“Temp”), size = 3) + geom_line(col=“orange”) + geom_point(aes(y=Wind+50, col = “Wind speed”)) + scale_y_continuous(sec.axis = sec_axis(~.-50, name = “Wind (mph)”)) + xlab(“Date”) + ylab(“Temperature (C)”) + ggtitle(“Environmental measurements over time”)+ theme(axis.title.x = element_text(face=“bold”, size=28), axis.title.y = element_text(face=“bold”, size=28), axis.text.y = element_text(size=20), axis.text.x = element_text(size=20), legend.text =element_text(size=20), legend.title = element_text(size=20, face=“bold”), plot.title = element_text(hjust = 0.5, face=“bold”, size=32))\n#outliers and bad fits####\ngood_fit_x &lt;- runif(100, 1, 50) good_fit_y &lt;- rnorm(100,25,2) good_data &lt;- data.frame(source = “good”, x=good_fit_x, y=good_fit_y) bad_fit_x &lt;- runif(10, 20, 30) bad_fit_y &lt;- rnorm(10,95,1) bad_data &lt;- data.frame(source = “outlier”, x=bad_fit_x, y=bad_fit_y) all_data &lt;- rbind (good_data, bad_data)\n#just points#### ggplot(all_data, aes(x =x,y =y)) + geom_point(aes(color=source), size = 3) + xlab(“x”) + ylab(“y”) + ggtitle(“Outliers can impact data”)+ theme(axis.title.x = element_text(face=“bold”, size=28), axis.title.y = element_text(face=“bold”, size=28), axis.text.y = element_text(size=20), axis.text.x = element_text(size=20), legend.text =element_text(size=20), legend.title = element_text(size=20, face=“bold”), plot.title = element_text(hjust = 0.5, face=“bold”, size=32))\n#curve and scatter#### ggplot(all_data, aes(x =x,y =y)) + geom_point(aes(color=source), size = 3) + geom_smooth(se = F) + xlab(“x”) + ylab(“y”) + ggtitle(“Outliers can impact data”)+ theme(axis.title.x = element_text(face=“bold”, size=28), axis.title.y = element_text(face=“bold”, size=28), axis.text.y = element_text(size=20), axis.text.x = element_text(size=20), legend.text =element_text(size=20), legend.title = element_text(size=20, face=“bold”), plot.title = element_text(hjust = 0.5, face=“bold”, size=32))\n#just curve#### ggplot(all_data, aes(x =x,y =y)) + geom_smooth(se = F) + xlab(“x”) + ylab(“y”) + ggtitle(“Outliers can impact data”)+ theme(axis.title.x = element_text(face=“bold”, size=28), axis.title.y = element_text(face=“bold”, size=28), axis.text.y = element_text(size=20), axis.text.x = element_text(size=20), legend.text =element_text(size=20), legend.title = element_text(size=20, face=“bold”), plot.title = element_text(hjust = 0.5, face=“bold”, size=32))\n#skewed left with measures of central tendency#### ##weird issues with margins and legends par(mar = c(rep(4,4))) birds &lt;- rbeta(10000,70,5) hist(birds, main=“Weight of Westchester cardinals”, xlab = “Weight (g)”, ylab = “Frequency (#)”, col = “red”, cex.lab=label_size, cex.axis=1.25, cex.main=title_size, cex.sub=label_size) abline(v=mean(birds), col=“yellow”, lwd = 4) abline(v=median(birds), col=“green”, lwd = 4) #no built in mode function…. # Create the function. getmode &lt;- function(v) { uniqv &lt;- unique(v) uniqv[which.max(tabulate(match(v, uniqv)))] }\nabline(v=(getmode(birds)), col=“blue”, lwd = 4) legend(“topleft”, legend = c(“mean”, “median”, “mode”), fill=c(“yellow”, “green”,“blue”), cex = 1.5, bty = “n”, x.intersp = .1, y.intersp = .5)\n#bimodal data with measures of central tendency##### par(mar = c(rep(2,4))) putnam &lt;- c(rnorm(100,20,4),rnorm(100,40,4)) hist(putnam, main=“Weight of Westchester woodpeckers”, xlab = “Weight (g)”, ylab = “Frequency (#)”, col = “orange”, cex.lab=label_size, cex.axis=1.25, cex.main=title_size, cex.sub=label_size, probability = T) lines(density(putnam), col = “black”, lwd = 4) # add a density estimate with defaults abline(v=mean(putnam), col=“red”, lwd = 4) abline(v=median(putnam), col=“green”, lwd = 4) abline(v=(getmode(putnam)), col=“blue”, lwd = 4) legend(“bottomright”, legend = c(“mean”, “median”, “mode”), fill=c(“red”,“green”,\n                                                                \"blue\"), cex = 1.5,\n   bty=\"n\", x.intersp = .1, y.intersp = .5)\n#illustrate variance#### #add sample # iris$sample &lt;- 1:nrow(iris)\n#just scatter plot\nggplot(iris[iris$Species == “setosa”,], aes(sample,Sepal.Length)) + geom_point(size = 3) + ylab(“Sepal Length (cm)”)+ggtitle(expression(paste(“Sepal Length in”, italic(“Iris setosa”))))+ theme(axis.title.x = element_text(face=“bold”, size=28), axis.title.y = element_text(face=“bold”, size=28), axis.text.y = element_text(size=20), axis.text.x = element_text(size=20), legend.text =element_text(size=20), legend.title = element_text(size=20, face=“bold”), plot.title = element_text(hjust = 0.5, face=“bold”, size=32))\n#add mean ggplot(iris[iris\\(Species == \"setosa\",], aes(sample,Sepal.Length)) +  geom_point(size = 3) +  ylab(\"Sepal Length (cm)\")+ggtitle(expression(paste(\"Sepal Length in \", italic(\"Iris setosa\"))))+  geom_hline(yintercept = mean(iris[iris\\)Species == “setosa”, “Sepal.Length”]), color = “blue”, size = 2) + annotate(“text”, label = “mean”, x = 20, y = 4.9 , size = 8, color = “blue”) + theme(axis.title.x = element_text(face=“bold”, size=28), axis.title.y = element_text(face=“bold”, size=28), axis.text.y = element_text(size=20), axis.text.x = element_text(size=20), legend.text =element_text(size=20), legend.title = element_text(size=20, face=“bold”), plot.title = element_text(hjust = 0.5, face=“bold”, size=32))\n#add segment for each point segment_data = data.frame( x = 1:50, xend = 1:50, y = iris[iris\\(Species == \"setosa\", \"Sepal.Length\"],  yend = mean(iris[iris\\)Species == “setosa”, “Sepal.Length”]) )\nggplot(iris[iris\\(Species == \"setosa\",], aes(sample,Sepal.Length)) +  geom_point(size = 3) +  ylab(\"Sepal Length (cm)\")+ggtitle(expression(paste(\"Sepal Length in \", italic(\"Iris setosa\"))))+  geom_hline(yintercept = mean(iris[iris\\)Species == “setosa”, “Sepal.Length”]), color = “blue”, size = 2) + annotate(“text”, label = “mean”, x = 20, y = 4.9 , size = 8, color = “blue”) + annotate(“text”, label = “square each red line and find average”, x = 25, y = 5.5 , size = 8, color = “red”) + geom_segment(data = segment_data, aes(x = x, y = y, xend = xend, yend = yend), color= “red”, size = 1.1) + theme(axis.title.x = element_text(face=“bold”, size=28), axis.title.y = element_text(face=“bold”, size=28), axis.text.y = element_text(size=20), axis.text.x = element_text(size=20), legend.text =element_text(size=20), legend.title = element_text(size=20, face=“bold”), plot.title = element_text(hjust = 0.5, face=“bold”, size=32))\n#transformations####\nsample_data &lt;- data.frame(x = rnorm (1000, 1, 1)) sample_data\\(x_add &lt;- sample_data\\)x+5\nggplot(sample_data) + geom_histogram(aes(x =x, fill=“x”), se = F) + geom_histogram(aes(x = x_add, fill=“x+5”), se = F)+ labs(fill=“Data”)+ xlab(“x”) + ylab(“y”) + theme(axis.title.x = element_text(face=“bold”, size=28), axis.title.y = element_text(face=“bold”, size=28), axis.text.y = element_text(size=30), axis.text.x = element_text(size=30), legend.text =element_text(size=30), legend.title = element_text(size=20, face=“bold”), plot.title = element_text(hjust = 0.5, face=“bold”, size=32))\nsample_data\\(x_multiply &lt;- sample_data\\)x*5\nggplot(sample_data) + geom_histogram(aes(x =x, fill=“x”), se = F) + geom_histogram(aes(x = x_multiply, fill=“x*5”), se = F)+ labs(fill=“Data”)+ xlab(“x”) + ylab(“y”) + theme(axis.title.x = element_text(face=“bold”, size=28), axis.title.y = element_text(face=“bold”, size=28), axis.text.y = element_text(size=30), axis.text.x = element_text(size=30), legend.text =element_text(size=30), legend.title = element_text(size=20, face=“bold”), plot.title = element_text(hjust = 0.5, face=“bold”, size=32))\n#shift them left summary(birds) length(birds[birds &lt; .9]) birds[birds &lt; .9] &lt;- birds[birds &lt; .9] - .2 hist(birds, main=“Weight of Westchester cardinals”, xlab = “Weight (g)”, ylab = “Frequency (#)”, col = “red”, cex.lab=label_size, cex.axis=1.25, cex.main=title_size, cex.sub=label_size) abline(v=mean(birds), col=“yellow”, lwd = 4) abline(v=median(birds), col=“green”, lwd = 4) abline(v=(getmode(birds)), col=“blue”, lwd = 4) legend(x=.75, y= 1000, legend = c(“mean”, “median”, “mode”), fill=c(“yellow”,“green”,\n                                                                \"blue\"), cex = 1.5,\n   bty=\"n\", x.intersp = .1, y.intersp = .5)\n#categorical data#### head(iris) iris\\(random &lt;- runif(1:nrow(iris)) iris\\)LL &lt;- 0 iris\\(LL[iris\\)random &gt; .7] &lt;- 1\nggplot(iris[iris\\(Species == \"setosa\", ], aes(LL)) +  geom_histogram(size=3) +  xlab(\"Genotype score\")+  ylab(\"Frequency\")+  ggtitle(\"Genotype score in an iris species\")+  geom_vline(xintercept = mean(iris[iris\\)Species == “setosa”, “LL”]), color = “blue”) + annotate(“text”, label = “proportion”, x = .25, y = 20 , size = 8, color = “blue”) + theme(axis.title.x = element_text(face=“bold”, size=28), axis.title.y = element_text(face=“bold”, size=28), axis.text.y = element_text(size=20), axis.text.x = element_text(size=20), legend.text =element_text(size=20), legend.title = element_text(size=20, face=“bold”), plot.title = element_text(hjust = 0.5, face=“bold”, size=32))"
  },
  {
    "objectID": "content/acknowledgements.html",
    "href": "content/acknowledgements.html",
    "title": "Acknowledgments",
    "section": "",
    "text": "Many thanks to Bill Rice and Steve Gaines at UCSB for encouraging me to continue my interests in statistics.\nMy department at Baruch also supported me when I proposed the Biostatistics (ENV/BIO 2100) course in 2017 and taught for the first time in 2018.\nBaruch College’s Center for Teaching and Learning, as a channel for a statewide funding effort focuse on developed OER (open-educational resources) at CUNY and SUNY campuses, have supported the continued development of the class.\nThe class now includes\n\nwebsite (https://sites.google.com/view/biostats/home) housing slides and associated material\ntutorials for many lessons using Swirl\n\ndeveloped with support of a QUBES working group\n\nthis book!\n\nThis repo and GitHub Action was based on the tutorial by Openscapes quarto-website-tutorial by Julia Lowndes and Stefanie Butland."
  }
]