[
  {
    "objectID": "content/acknowledgements.html",
    "href": "content/acknowledgements.html",
    "title": "Acknowledgments",
    "section": "",
    "text": "Many thanks to Bill Rice and Steve Gaines at UCSB for encouraging me to continue my interests in statistics.\nMy department at Baruch also supported me when I proposed the Biostatistics (ENV/BIO 2100) course in 2017 and taught for the first time in 2018.\nBaruch College’s Center for Teaching and Learning, as a channel for a statewide funding effort focuse on developed OER (open-educational resources) at CUNY and SUNY campuses, have supported the continued development of the class.\nThe class now includes\n\nwebsite (https://sites.google.com/view/biostats/home) housing slides and associated material\ntutorials for many lessons using Swirl\n\ndeveloped with support of a QUBES working group\n\nthis book!\n\nThis repo and GitHub Action was based on the tutorial by Openscapes quarto-website-tutorial by Julia Lowndes and Stefanie Butland."
  },
  {
    "objectID": "content/Introduction.html",
    "href": "content/Introduction.html",
    "title": "Introduction",
    "section": "",
    "text": "“Why is statistics a required course for someone who wants to be a dentist/doctor/ nurse?”\nThis is a common question (or at least thought) for many students. I hope to convince you this semester you at least need to understand statistics as part of the scientific method (and you should realize the scientific process informs all those jobs - in fact it can inform any job or task where you are searching for an answer or better method).\nFor example, doctors prescribe medicine to patients, but how do they know these medicines work? Some doctors carry out research, but many rely on published guidelines, which themselves rely on research. So a new drug or treatment is proposed- but who decides it’s worth using? Researchers carry out trials to determine the efficacy of the treatment. In doing this they have to consider how to design an experiment (what do they collect? from whom?) and analyze the resulting data so they can trust the results.\n\n\n\nXKCD: Control Group\n\n\nOther students in our class may be interested in a more environment- or resource management- focused career (e.g., wildlife rehabilitation, carbon mitigation expert, researcher). Regardless of your goal, any question should be informed by this approach. For example,\n\nDoes an environmental factor cause cancer?\nDo potential toxins really harm the enviroment?\nIs organic food really healthier?\nDoes exposing organisms reared in captivity to predator cues lead to more successful releases?\n\nZhu et al. (2023)\n\n\n\nAt its heart, statistics is about turning data into information that we can use to make decisions or better understand the world around us. Data can come from experiments we are running. This offers a clear connection to field and lab science, and its what we will focus on for most of this class. Data and theories can also be used to develop models that produce output ; this isn’t real-world data, but it offers very useful insight on what we think will happen if something occurs (and something we can test with other field data!). For example, restoration projects may focus on small-scale plots that undergo different restoration protocols. Data produced from monitoring these plots may be used to develop models to predict large-scale impacts (and maybe benefits and costs) of different restoration scenarios for larger regions.\nAbove I used words like know (how do they know these medicines work? )and predict (develop models to predict large-scale impacts (and maybe benefits and costs) of different restoration scenarios for larger regions). While we may use words like these that are related our findings interchangeably at times, its important to note the different. Statistics (and related models) generally give us estimates about how the real world works. Put another way, if we knew everything about the world, we wouldn’t need to use statistics because we wouldn’t need estimates.\nThe reasons we don’t usually know everything include\n\nthe world is complicated (some questions can’t be directly tested)\nit’s not possible to measure everything\n\nBecause of this, statistics is also focused on trying to describe populations of interest or find signals (impacts of treatments, medicines, or restoration practices, for example) amidst the noise (variation in outcomes that are always common!). When considering relationships among variables, noise may occur because there are lots of things impacting the outcome of interest. For example, restoration protocol may impact the trajectory of an oyster reef, but so too may local factors like temperature an and salinity. Noise can also occur because of sampling error - since we don’t measure everything, our estimate of relationship or population traits may be imperfect.\nIn the next session we’ll start to discuss how we can use data to make estimates about a population (and answer questions like what is a population and what are we trying to estimate). However, a final aside to finish this section - we often think about statistics happening after an experiment, survey, or other thing we get data from is finished. However, part of statistics is experimental design! Statistics should inform how you setup an experiment. In fact, the best idea (which seldom happens!) is that you simulate the type of data you expect to get from your experiment and then analyze that before you actually run the experiment. This ensures you are measuring what you need to measure and setting things up correctly! As the famous quote (to statisticians) states,\n\nTo consult the statistician after an experiment is finished is often merely to ask him to conduct a post mortem examination. He can perhaps say what the experiment died of. -Ronald Fisher\n\n\n\n\n\nReferences\n\nZhu, Jennifer, J. Stephen Gosnell, Laila Akallal, and Micah Goltsman. 2023. “Fear Changes Traits and Increases Survival: A Meta-Analysis Evaluating the Efficacy of Antipredator Training in Captive-Rearing Programs.” Restoration Ecology 31 (3): e13674. https://doi.org/10.1111/rec.13674."
  },
  {
    "objectID": "content/1b_intro_to_Rmd.html",
    "href": "content/1b_intro_to_Rmd.html",
    "title": "1b. Intro to Rmd files and literate programming",
    "section": "",
    "text": "Rmd files differ from R files in that they combine regular text with code chunks. This is a code chunk\n\nprint(\"this is a chunk\")\n\n[1] \"this is a chunk\"\n\n\nCode chunks combine code with output. When combined with regular text/prose, this makes it easier to produce a range of documents. You set the output in the YAML header (the stuff between the 3 dashes you see at top of this document).\nAfter you write the file, you Knit it to turn the Rmd file into the selected output. Try it now. Note the first time you do this in a project you may be prompted to install a number of packages! If you are using a webservice you may also need to allow pop-ups in your browser. Don’t be surprised if a new window pops up (it should).\n\n\n\nThe knit button turns your .rmd file into other products\n\n\nThe Knit button saves the .Rmd file and renders a new version whose output depends on what you selected in the header. Here we have html_document, so if everything works a preview of a webpage like document should appear. The file also produces a github friendly .md file. This means you should only edit the Rmd file (leave the md and output files alone! They are automatically produced any changes you make there will be overwritten by your next knit).\nWhen you Knit a file, it runs in a totally new R instance. this means anything you only added in your instance (like working in the console) won’t be available. In other words, its the best way to see what a “new” user gets when they use your code.\nhowever, you don’t have to knit the file every time. if you just want to see output, note you can press the green button next to an R chunk.\n\n\n\nThe green arrows just runs the chunk in the console and shows the output\n\n\n\nprint(\"this is a chunk\")\n\n[1] \"this is a chunk\"\n\n\nNow we’ll start changing the file to show you how rmarkdown works. First, amend the file by replacing the NAME and DATE spots in the header (top of the file between the — markers) with your name and the real date. Then Knit the file again. You should see your name in the new preview.\nRstudio has a Markdown Quick Reference guide (look under the help tab), but some general notes.\n\nPound/Hashtag signs denote headers\nyou can surround something double asterisks for bold or single asterisks for italics\nlists are denoted by numbers or asterisks at beginning of line (followed by space!)\n\nand can be indented for sublevels\n\nR code can be done inline, but is generally placed in stand-alone chunks\n\nthese will, by default, show the code and output\n\nlots of other options exist!\n\nThe main idea is Rmd files allow you to combine code, text, graphs, etc into multiple outputs that you can share (including with coding illiterate colleagues who just want output)."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome",
    "section": "",
    "text": "This site is a work in progress! Original .R and .rmd files from are being migrated into a new book using quarto.\nThis book is meant to accompany BIO/ENV 2100:Biostatistics at Baruch College, but it should offer another perspective to anyone trying to learn statistics, R, or some combination. The class now includes\n\na website housing slides and associated material\ntutorials for many lessons using Swirl\n\ndeveloped with support of a QUBES working group\n\nthis book!\n\nAll of these resources may prove useful in learning the material.\nI say another perspective because an immediate question should be why the world needs another self-published statistics book, especially one focused on introducing R. There are already many, many good ones (some of which are shared at the end of each of relevant chapter and in the list of additional resources).To this I offer a few responses\n\nAs already noted, this book was designed to accompany courses I teach. Having the material presented in the same order, but with additional context, should help students learn the material.\nThe courses I teach focus on introducing statistics from a biological perspective, so examples, papers, and problems focus on natural systems when possible. Having examples, including from published papers, that introduce the need and use of various tests should aid in helping students learn to understand why various tests exist and when they should be used.\n\nStatistics is a complex field that is unfortunately often stuffed into the curriculum of other majors (see above). However, my goal is to teach the concepts while also giving students the tools to actually address questions. Given these goals, we’ll learn how to use tools and applications including R (through Rstudio), git, and markdown. If this is your first time using any (or all) of these tools, don’t worry. We will start at the very beginning. However, you may encounter some questions as we introduce new material. For example, we’ll talk about normality before fully explaining it. Feel free to ask questions, but you can also be sure we’ll cycle back (and expand) on many topics.\nHopefully this will open the door to careers in data science (a related term) and statistics to some students who haven’t considered that path before. Jobs in these fields are some of the fastest growing in the country, and the skills you learn in this class, including\n\nCritical thinking\nCoding\n\nR\nmarkdown\ngit\n\nData wrangling\nVisualization and stats\nWriting and communication\n\nwill be some of the most transferable you acquire as an undergraduate.\n\n\n\nChart from Occupational Outlook Handbook showing fastest growing occupations and median pay. Data from 9.8.22. Screenshot taken 7.26.23\n\n\nI hope you find the book useful and learn to see statistics as more than something you do to finish a project or a course that you are required to take. The book is written in quarto, a derivative/extension of rmarkdown, which allows R code and prose to be easily created and published together. You can see the code for all the material on github, and you will learn early on how to make a copy of the material that you can work on yourself."
  },
  {
    "objectID": "content/getting_started.html",
    "href": "content/getting_started.html",
    "title": "Before the first class",
    "section": "",
    "text": "Over the course of the semester/reading this book, our (ambitious) goals are to\nTo prepare for our first few lessons"
  },
  {
    "objectID": "content/getting_started.html#concept-stuff",
    "href": "content/getting_started.html#concept-stuff",
    "title": "Before the first class",
    "section": "Concept stuff",
    "text": "Concept stuff\n\nCheck out the class website\nWatch this video"
  },
  {
    "objectID": "content/getting_started.html#tech-stuff",
    "href": "content/getting_started.html#tech-stuff",
    "title": "Before the first class",
    "section": "Tech stuff",
    "text": "Tech stuff\n\nGet access to R!. You can make an account at Rstudio cloud (https://rstudio.cloud/). You can also install R (https://cran.r-project.org/) and Rstudio (https://www.rstudio.com/) on your machine, but I strongly recommend starting with Rstudio cloud.\nRstudio cloud is free for up to 25 hours/month, you don’t have to maintain it, and it gives gives a standard install (same on all machines, so your intro/ our training may be smoother). You can also do both. If you need help, videos are at :\n\nDownloading R\nDownloading Rstudio\nMaking a Rstudio cloud account\n\nJoin the github classroom we’ll be using for our sessions\n\nlook for email from Blackboard! \nWhen you visit the page it will ask you to connect or create a github repository. You can use any name (be anonymous or not) that you want. This is a free process.\n\n\n\nOptional (get a head start if you want)\nIt may be easier to open these intructions in a browser so you can follow along there while working in Rstudio!\nAfter you join the github classroom, you’ll make a clone of the repository onto your machine. First, find your copy of the repository. You can follow the github classroom link again, or log into github and then visit https://github.com/settings/repositories. Find the repository called data_science_intro_YOURGITHUBUSERNAME, and click on it. Then follow along below - find instructions for Rstudio cloud or Rstudio desktop depending on your setup.\n\nIf you are using Rstudio cloud…\nVideo at Accepting your first github repository (from github classroom) and cloning to Rstudio cloud\nLog into your Rstudio cloud account. You’ll see something like this:\n\n\n\nRstudio cloud home screen\n\n\nTo copy a repository, select New Project, New Project from Github repo. Next you’ll need to enter the url for your repository. To find this, click on the Code button from the github page for your repository (instructions above!)\n\n\n\nClick on Code to get repository url\n\n\nCopy the web url (or click the copy icon). Input that into the field asking for the URL of your github repository.\nNote you may need to enter your github username and password to create the repository.\nThe next screen will bring you to a “normal” RStudio screen. We’ll come back to this in the first class or two!\n\n\nIf you are using RStudio on your desktop (or via a server…anywhere that\nlooks like an RStudio screen)\nVideo at Accepting your first github repository (from github classroom) and cloning to Rstudio desktop\nTo start working on an assignment, open RStudio.\n\n\n\nSelect File &gt; New Project in Rstudio\n\n\nSelect file, new project, Version control. On the next screen select git. If this isn’t available, you may need to install git (free) on your system. You can download it at https://git-scm.com/download/.\nNext you’ll need to enter the url for your repository. To find this, click on the Code button from the github page for your repository (instructions above!).\n\n\n\nClick on Code to get repository url\n\n\nCopy the web url (or click the copy icon). Input that into the Rstudio Repository URL space. You can select/edit what you want the repository to be called and where its stored (its just a folder on your computer). For example, I have a Repositories folder in my main hard drive where I save all of these. Then select Create project. Whatever you choose, the project will be saved in new folder in that location using the name you chose. Note you may need to enter your github username and password to create the repository.\nYou also may get an error/warning about personal access token! this happens at different points on different machines (thus why Rstudio cloud is nice). If you see this now, don’t worry. We’ll cover it (a known issue) in class.\nThe next screen will bring you to a “normal” RStudio screen. We’ll come back to this in the first class or two!"
  },
  {
    "objectID": "content/summarizing_data.html",
    "href": "content/summarizing_data.html",
    "title": "Summarizing data",
    "section": "",
    "text": "Let’s start our statistics journey by thinking about the simplest scenario: We want to know something about a group. This means we have a target trait we are focused, and we have defined a group of interest. We can call this group of interest a population. As we’ve already noted, in a perfect world we know everything (or at least our trait value) for every member of the focal population and not even need statistics. Statistics can actually be defined as\n\nthe practice or science of collecting and analyzing numerical data in large quantities, especially for the purpose of inferring proportions in a whole from those in a representative sample. - Oxford English Dictionary\n\nHowever, we often don’t or can’t measure every member of a population. It may be too difficult or expensive to measure every member of the population. In fact, we may not even know how large the population is!\nNote that while the term population may have specific meanings in some fields (such as ecology), here population is just the group of interest. It could be a population of Goliath grouper in Florida, a population of flowers in Virginia, or people from a certain country or demographic group. We could want to know something about all of these groups!\nIn the cases where we can’t measure every member of the population, we take a sample. The sample is the subset of the population that we will collect data on our focal trait(s) from. Data can be collected from our sample using experimental studies, where researchers manipulate something. Researchers may expose organisms to different stimuli in a controlled lab, field, or mesocosm study lab to see what happens. For example, researchers interested in impacts of an invasive crayfish (Pacifastacus leniusculus) on Mazama newts (Taricha granulosa mazamae) collected newts and crayfish and put them in large tanks to observe interactions Girdner et al. (2018).\n\n\n\nExperimental mesocosms used to evaluate Mazama newt and signal crayfish behavior on Wizard Island, Crater Lake, Oregon. A team of NPS scientists observed the interaction between newts and crayfish in tanks designed to mimic natural habitat.\n\n\nData can also be collected from observational studies, where researchers simply measure outcomes and other traits without manipulating anything. For example, scientists interested in impacts of climate change on species ranges surveyed sites for species presence and abundance and compared it to historical data (Sagarin et al. (1999)).\nDifferent types of studies change what we can use the data for. In general, experimental studies are more commonly used to ascertain causation (something makes something happen), whereas observational studies are used to assess correlation (something happens when something else happens). However, these can be hard to disentangle, especially since studies can only be observational since experiments would be unethical or impossible to carry out. As XKCD puts it\n\n\n\nXKCD: Correlation. Title text (text that pops up when you hover over the comic): Correlation doesn't imply causation, but it does waggle its eyebrows suggestively and gesture furtively while mouthing ‘look over there’.\n\n\n\nCorrelation doesn’t imply causation, but it does waggle its eyebrows suggestively and gesture furtively while mouthing ‘look over there’ - XKCD #552\n\nRegardless of the study type, if we want to infer something about the population from our sample, we need to make sure the sample is representative of the population. That means it should not be biased.\nJust to be confusing, a statistic can be a trait of the population\n\nthe numerical facts or data themselves - Dictionary.com\n\nThink about it this way. We want to know if several species of iris (Iris versicolor and *Iris setosa)\nWe generally want to know something about a population. Since measuring the entire population may not be possible (too expensive, or in ecology you may not know if you measured the whole population), we generally sample the population. This means we measure a trait/characteristic (or multiple traits/characteristics)\n#plots from 1. Intro.ppt#### iris\n#base histograms#### #note hist is odd with cex label_size &lt;- 2 title_size &lt;- 2.5\npar(mar = c(7,7,7,7)) #if you get an error about “figure margins too large”, reset this to par(mar = c(rep(5,4))) #this is just issue with trying to size figures for lecture slides #may also have issues with some images…\nhist(iris$Sepal.Length, main = “Sepal Lengths”, xlab = “Sepal Length (cm)”, cex.lab=label_size, cex.axis=label_size, cex.main=title_size, cex.sub=label_size, col = “blue”)\n#skewed left#### birds &lt;- rbeta(10000,70,5) hist(birds, main=“Weight of Westchester cardinals”, xlab = “Weight (g)”, ylab = “Frequency (#)”, col = “red”, cex.lab=label_size, cex.axis=1.25, cex.main=title_size, cex.sub=label_size)\n#normal data#### putnam &lt;- c(rnorm(1000,20,4)) hist(putnam, main=“Weight of Westchester parrots”, xlab = “Weight (g)”, ylab = “Frequency (#)”, col = “green”, cex.lab=label_size, cex.axis=1.25, cex.main=title_size, cex.sub=label_size)\n#uniform data#### putnam &lt;- c(runif(1000,.1,8)) hist(putnam, main=“Weight of Westchester Robins”, xlab = “Weight (g)”, ylab = “Frequency (#)”, col = “Pink”, cex.lab=label_size, cex.axis=1.25, cex.main=title_size, cex.sub=label_size)\n#skewed right#### birds &lt;- rbeta(10000,2,12) hist(birds, main=“Weight of Westchester Blue Jays”, xlab = “Weight (g)”, ylab = “Frequency (#)”, col = “blue”, cex.lab=label_size, cex.axis=1.25, cex.main=title_size, cex.sub=label_size)\n#bimodal data#### putnam &lt;- c(rnorm(100,20,4),rnorm(100,40,4)) hist(putnam, main=“Weight of Westchester woodpeckers”, xlab = “Weight (g)”, ylab = “Frequency (#)”, col = “orange”, cex.lab=label_size, cex.axis=1.25, cex.main=title_size, cex.sub=label_size)\n#add density overlay to histograms#### hist(iris\\(Sepal.Length, main = \"Sepal Lengths\", xlab = \"Sepal Length (cm)\", cex.lab=label_size, cex.axis=label_size, cex.main=title_size, cex.sub=label_size, col = \"blue\", prob = T) lines(density(iris\\)Sepal.Length), col = “red”) # add a density estimate with defaults\n#normal data with density overly and true normal##### putnam &lt;- c(rnorm(1000,20,4)) hist(putnam, main=“Weight of Westchester parrots”, xlab = “Weight (g)”, ylab = “Frequency (#)”, col = “green”, cex.lab=label_size, cex.axis=1.25, cex.main=title_size, cex.sub=label_size, probability = T) lines(density(putnam), col = “black”) # add a density estimate with defaults curve(dnorm(x, mean=20, sd=4), col=“darkblue”, lwd=2, add=TRUE, yaxt=“n”)\n#bar charts for categorical data#### head(USArrests) names(USArrests) USArrests\\(State &lt;- as.factor(rownames(USArrests)) par(las=2) barplot(USArrests\\)Murder, names.arg = USArrests$State, cex.lab=label_size, cex.axis=label_size, cex.main=title_size, cex.sub=label_size, col = “blue”, main = “Murder Arrests per 100,000 since 1973”) write.csv(USArrests, “USArrests.csv”, row.names = F)\nwrite.csv(iris, “iris.csv”, row.names = F)\n#bar chart issues#### #auto breaks#### hist(iris\\(Sepal.Length, main = \"Sepal Lengths, auto breaks with R\", xlab = \"Sepal Length (cm)\", cex.lab=label_size, cex.axis=label_size, cex.main=title_size, cex.sub=label_size, col = \"blue\") #counts of auto breaks#### x =hist(iris\\)Sepal.Length, main = “Sepal Lengths, auto breaks with R”, xlab = “Sepal Length (cm)”, cex.lab=label_size, cex.axis=label_size, cex.main=title_size, cex.sub=label_size) plot(x\\(breaks[-9], x\\)counts, main = “Sepal Lengths, auto breaks with R”, xlab = “Sepal Length (cm)”, ylab = “Frequency”, cex.lab=label_size, cex.axis=1.5, cex.main=title_size, cex.sub=label_size, col=“blue”, pch = 16, cex = 3) #setting own breaks#### hist(iris\\(Sepal.Length, breaks=3, main = \"Sepal length histogram, 3 breaks\", xlab = \"Sepal Length (cm)\", cex.lab=label_size, cex.axis=label_size, cex.main=title_size, cex.sub=label_size, col = \"blue\") hist(iris\\)Sepal.Length, breaks=10, main = “Sepal length histogram, 10 breaks”, xlab = “Sepal Length (cm)”, cex.lab=label_size, cex.axis=label_size, cex.main=title_size, cex.sub=label_size, col = “blue”)\n#boxplot versicolor#### #need to use ggplot2 for ease (will get to this later and typically use it) library(ggplot2) ggplot(iris[iris$Species == “versicolor”,], aes(Species,Sepal.Length)) + geom_boxplot(aes(colour=Species), size = 3) + ylab(“Sepal Length (cm)”)+ggtitle(“Sepal Length of Iris versicolor”)+ xlab(““) + theme(axis.title.x = element_text(face=”bold”, size=28), axis.title.y = element_text(face=“bold”, size=28), axis.text.y = element_text(size=20), axis.text.x = element_text(size=0), legend.text =element_text(size=20), legend.title = element_text(size=20, face=“bold”), plot.title = element_text(hjust = 0.5, face=“bold”, size=32))\n#data from multiple groups#### #barchart #### # #load function from Rmisc library(Rmisc)\n#now use function_output &lt;- summarySE(iris, measurevar=“Sepal.Length”, groupvars = c(“Species”))\nggplot(function_output, aes(x=Species, y=Sepal.Length)) + geom_col(aes(fill=Species), size = 3) + ylab(“Sepal Length (cm)”)+ggtitle(“Sepal Length of various iris species”)+ theme(axis.title.x = element_text(face=“bold”, size=28), axis.title.y = element_text(face=“bold”, size=28), axis.text.y = element_text(size=20), axis.text.x = element_text(size=20), legend.text =element_text(size=20), legend.title = element_text(size=20, face=“bold”), plot.title = element_text(hjust = 0.5, face=“bold”, size=32))\n#scatterplot all species#### ggplot(iris, aes(Species,Sepal.Length)) + geom_point(aes(colour=Species), size = 3) + ylab(“Sepal Length (cm)”)+ggtitle(“Sepal Length of various iris species”)+ theme(axis.title.x = element_text(face=“bold”, size=28), axis.title.y = element_text(face=“bold”, size=28), axis.text.y = element_text(size=20), axis.text.x = element_text(size=20), legend.text =element_text(size=20), legend.title = element_text(size=20, face=“bold”), plot.title = element_text(hjust = 0.5, face=“bold”, size=32))\n#stacked histogram#### ggplot(iris, aes(Sepal.Length)) + geom_histogram(aes(fill=Species), size=3) + xlab(“Sepal Length (cm)”)+ ylab(“Frequency”)+ ggtitle(“Sepal Length of various iris species”)+ theme(axis.title.x = element_text(face=“bold”, size=28), axis.title.y = element_text(face=“bold”, size=28), axis.text.y = element_text(size=20), axis.text.x = element_text(size=20), legend.text =element_text(size=20), legend.title = element_text(size=20, face=“bold”), plot.title = element_text(hjust = 0.5, face=“bold”, size=32))\n#facetted stacked histogram#### ggplot(iris, aes(Sepal.Length)) + geom_histogram(aes(fill=Species), size=3) + xlab(“Sepal Length (cm)”)+ ylab(“Frequency”)+ ggtitle(“Sepal Length of various iris species”)+ theme(axis.title.x = element_text(face=“bold”, size=28), axis.title.y = element_text(face=“bold”, size=28), axis.text.y = element_text(size=20), axis.text.x = element_text(size=20), legend.text =element_text(size=20), legend.title = element_text(size=20, face=“bold”), legend.position = “bottom”, plot.title = element_text(hjust = 0.5, face=“bold”, size=32))+ facet_wrap(~Species, ncol = 1)\n#boxplot all species#### ggplot(iris, aes(Species,Sepal.Length)) + geom_boxplot(aes(colour=Species), size = 3) + ylab(“Sepal Length (cm)”)+ggtitle(“Sepal Length of various iris species”)+ theme(axis.title.x = element_text(face=“bold”, size=28), axis.title.y = element_text(face=“bold”, size=28), axis.text.y = element_text(size=20), axis.text.x = element_text(size=20), legend.text =element_text(size=20), legend.title = element_text(size=20, face=“bold”), plot.title = element_text(hjust = 0.5, face=“bold”, size=32))\n#cdf all species#### par(cex = 2) versi &lt;- ecdf(iris[iris\\(Species == \"versicolor\",\"Sepal.Length\"]) plot(versi, verticals = T, col = \"red\", main = \"Cumulative frequency distribution of Sepal Length (cm)\", xlab = \"Sepal length (cm)\", ylab = \"Cumulative relative frequencey\") seto &lt;- ecdf(iris[iris\\)Species == “setosa”,“Sepal.Length”]) plot(seto, add = T, col = “blue”, verticals = T) virg &lt;- ecdf(iris[iris$Species == “virginica”,“Sepal.Length”]) plot(virg, add = T, col = “orange”, verticals = T)\n#example of diverging, stacked, and mosaic graphs#### library(dplyr)\n\nlong-form vegetation survey data from\n\n\nhttp://luisdva.github.io/rstats/Diverging-bar-plots/\n\n\nthese data should more or less reflect the vegetation patterns at “Quebrada de Cordoba”, Chile\nvegSurvey &lt;- data.frame(sampling_point=rep(c(1:5),4), slope=c(rep(“North”,10),rep(“South”,10)), veg_Type=rep(c(rep(“native”,5),rep(“introduced”,5)),2), spp=as.integer(abs(rnorm(20,5,2)))) vegSurvey\\(spp &lt;- ifelse(vegSurvey\\)veg_Type ==“introduced”,vegSurvey\\(spp+1,vegSurvey\\)spp)\nvegSurvey &lt;- vegSurvey %&gt;% mutate(sppInv= ifelse(veg_Type ==“native”,spp,spp*-1))\n#grouped bar plot#### ggplot(vegSurvey, aes(x=sampling_point, y=spp)) + geom_bar(aes(fill=veg_Type), size = 3, stat = “identity”, position = position_dodge(width=0.5)) + ylab(“Frequency”) + xlab(“Sampling point”) + ggtitle(“Invasive and native species based on site”)+ scale_fill_manual(name=“Plant type”,values = c(“#FFA373”,“#50486D”)) + theme(axis.title.x = element_text(face=“bold”, size=28), axis.title.y = element_text(face=“bold”, size=28), axis.text.y = element_text(size=20), axis.text.x = element_text(size=20), legend.text =element_text(size=20), legend.title = element_text(size=20, face=“bold”), plot.title = element_text(hjust = 0.5, face=“bold”, size=32))\n#stacked bar plot#### ggplot(vegSurvey, aes(x=sampling_point, y=spp)) + geom_bar(aes(fill=veg_Type), size = 3, stat = “identity”) + ylab(“Frequency”)+ xlab(“Sampling point”)+ ggtitle(“Invasive and native species based on site”)+ scale_fill_manual(name=“Plant type”,values = c(“#FFA373”,“#50486D”)) + theme(axis.title.x = element_text(face=“bold”, size=28), axis.title.y = element_text(face=“bold”, size=28), axis.text.y = element_text(size=20), axis.text.x = element_text(size=20), legend.text =element_text(size=20), legend.title = element_text(size=20, face=“bold”), plot.title = element_text(hjust = 0.5, face=“bold”, size=32))\n#facetted stacked#### ggplot(vegSurvey, aes(x=sampling_point, y=spp)) + geom_bar(aes(fill=veg_Type), size = 3, stat = “identity”) + ylab(“Frequency”)+ xlab(“Sampling point”)+ ggtitle(“Invasive and native species based on site”)+ scale_fill_manual(name=“Plant type”,values = c(“#FFA373”,“#50486D”)) + theme(axis.title.x = element_text(face=“bold”, size=28), axis.title.y = element_text(face=“bold”, size=28), axis.text.y = element_text(size=20), axis.text.x = element_text(size=20), legend.text =element_text(size=20), legend.title = element_text(size=20, face=“bold”), plot.title = element_text(hjust = 0.5, face=“bold”, size=32)) + facet_wrap(~slope, nrow = 1)\n\n\ndivergent plot\nggplot(vegSurvey, aes(x=sampling_point, y=sppInv, fill=veg_Type))+ geom_bar(stat=“identity”,position=“identity”)+ xlab(“sampling point”)+ylab(“number of species”)+ scale_fill_manual(name=“Plant type”,values = c(“#FFA373”,“#50486D”))+ coord_flip()+ geom_hline(yintercept=0)+ xlab(“Sampling Points”)+ ylab(“Species number”)+ scale_y_continuous(breaks = pretty(vegSurvey\\(sppInv),labels = abs(pretty(vegSurvey\\)sppInv)))+ theme(strip.text.x = element_text(face = “bold”))\n\n\ndivergent plot with facetting by slope\nggplot(vegSurvey, aes(x=sampling_point, y=sppInv, fill=veg_Type))+ geom_bar(stat=“identity”,position=“identity”)+ facet_wrap(~slope)+xlab(“sampling point”)+ylab(“number of species”)+ scale_fill_manual(name=“Plant type”,values = c(“#FFA373”,“#50486D”))+ coord_flip()+ geom_hline(yintercept=0)+ xlab(“Sampling Points”)+ ylab(“Species number”)+ scale_y_continuous(breaks = pretty(vegSurvey\\(sppInv),labels = abs(pretty(vegSurvey\\)sppInv)))+ theme(strip.text.x = element_text(face = “bold”))\n#mosaic plot#### #for mosaic plots, need to use other package (ggmosaic) or add frequency column #for your choice variable\nlibrary(reshape2)\n#get total native/invasive per site vegSurvey_veg_per_site &lt;- dcast(vegSurvey, sampling_point+veg_Type~ “total_veg_per_site”, sum, value.var = “spp”) vegSurvey_per_site &lt;- dcast(vegSurvey, sampling_point ~ “total_per_site”, sum, value.var = “spp”) vegSurvey_veg_per_site &lt;- merge(vegSurvey_veg_per_site, vegSurvey_per_site) vegSurvey_veg_per_site\\(Proportion &lt;- vegSurvey_veg_per_site\\)total_veg_per_site/ vegSurvey_veg_per_site$total_per_site\nggplot(vegSurvey_veg_per_site, aes(x=sampling_point, y=Proportion)) + geom_bar(aes(fill=veg_Type), size = 3, stat = “identity”) + ylab(“Percent”) + xlab(“Sampling point”) + ggtitle(“Invasive and native species based on site”)+ scale_fill_manual(name=“Plant type”,values = c(“#FFA373”,“#50486D”)) + theme(axis.title.x = element_text(face=“bold”, size=28), axis.title.y = element_text(face=“bold”, size=28), axis.text.y = element_text(size=20), axis.text.x = element_text(size=20), legend.text =element_text(size=20), legend.title = element_text(size=20, face=“bold”), plot.title = element_text(hjust = 0.5, face=“bold”, size=32))\n#turn this into pie chart#### vegSurvey_veg_per_site\\(sampling_point &lt;- factor(vegSurvey_per_site\\)sampling_point) #have to make weird empty factor else you get concentric circles vegSurvey_veg_per_site$Share &lt;- “” ggplot(vegSurvey_veg_per_site, aes(x=Share, y=Proportion)) + geom_bar(aes(fill=veg_Type), size = 3, stat = “identity”) + ylab(“Frequency”) + xlab(“Sampling point”) + ggtitle(“Invasive and native species based on site”)+ scale_fill_manual(name=“Plant type”,values = c(“#FFA373”,“#50486D”)) + theme(axis.title.x = element_text(face=“bold”, size=28), axis.title.y = element_text(face=“bold”, size=28), axis.text.y = element_text(size=20), axis.text.x = element_text(size=20), legend.text =element_text(size=20), legend.title = element_text(size=20, face=“bold”), plot.title = element_text(hjust = 0.5, face=“bold”, size=32)) + coord_polar(theta=“y”) + facet_wrap(~sampling_point)\n#or (not in slides) cast to get single plot/split#### vegSurvey_veg_per_site_cast &lt;- dcast(vegSurvey_veg_per_site, veg_Type ~ “Proportion”, value.var = “Proportion”, mean)\nvegSurvey_veg_per_site_cast$Site &lt;- “”\nggplot(vegSurvey_veg_per_site_cast, aes(x=Site, y=Proportion)) + geom_bar(aes(fill=veg_Type), size = 3, stat = “identity”) + ylab(“Frequency”) + xlab(““) + ggtitle(”Overall composition of invasive and native species across sites”)+ scale_fill_manual(name=“Plant type”,values = c(“#FFA373”,“#50486D”)) + theme(axis.title.x = element_text(face=“bold”, size=28), axis.title.y = element_text(face=“bold”, size=28), axis.text.y = element_text(size=20), axis.text.x = element_text(size=20), legend.text =element_text(size=20), legend.title = element_text(size=20, face=“bold”), plot.title = element_text(hjust = 0.5, face=“bold”, size=32)) + coord_polar(theta=“y”)\n#mosaic plot facetted by slope#### vegSurvey_per_slope &lt;- dcast(vegSurvey, sampling_point + slope~ “total_per_slope”, sum, value.var = “spp”) vegSurvey &lt;- merge(vegSurvey, vegSurvey_per_slope) vegSurvey\\(Proportion &lt;- vegSurvey\\)spp/vegSurvey$total_per_slope\nggplot(vegSurvey, aes(x=sampling_point, y=Proportion)) + geom_bar(aes(fill=veg_Type), size = 3, stat = “identity”) + ylab(“Frequency”) + xlab(“Sampling point”) + ggtitle(“Invasive and native species based on slope”)+ scale_fill_manual(name=“Plant type”,values = c(“#FFA373”,“#50486D”)) + theme(axis.title.x = element_text(face=“bold”, size=28), axis.title.y = element_text(face=“bold”, size=28), axis.text.y = element_text(size=20), axis.text.x = element_text(size=20), legend.text =element_text(size=20), legend.title = element_text(size=20, face=“bold”), plot.title = element_text(hjust = 0.5, face=“bold”, size=32)) + facet_wrap(~slope, ncol=1)\n#numerical, numerical relationships #### # #scatter#### ggplot(iris, aes(y =Petal.Length,x =Sepal.Length)) + geom_point(aes(colour=Species), size = 3) + xlab(“Sepal Length (cm)”) + ylab(“Petal Length (cm)”) + ggtitle(“Relationship between sepal and petal lengths in irises”)+ theme(axis.title.x = element_text(face=“bold”, size=28), axis.title.y = element_text(face=“bold”, size=28), axis.text.y = element_text(size=20), axis.text.x = element_text(size=20), legend.text =element_text(size=20), legend.title = element_text(size=20, face=“bold”), plot.title = element_text(hjust = 0.5, face=“bold”, size=32))\n#data over time#### #use airquality dataset for time series # airquality\\(Date &lt;- as.Date(paste(airquality\\)Month, airquality$Day, sep=“/”), format =“%m/%d” )\n#just points#### ggplot(airquality, aes(x =Date,y =Temp)) + geom_point(size = 3, col = “orange”) + xlab(“Date”) + ylab(“Temperature (C)”) + ggtitle(“Temperature over time”)+ theme(axis.title.x = element_text(face=“bold”, size=28), axis.title.y = element_text(face=“bold”, size=28), axis.text.y = element_text(size=20), axis.text.x = element_text(size=20), legend.text =element_text(size=20), legend.title = element_text(size=20, face=“bold”), plot.title = element_text(hjust = 0.5, face=“bold”, size=32))\n#points and line#### ggplot(airquality, aes(x =Date,y =Temp)) + geom_point(size = 3, col = “orange”) + geom_line() + xlab(“Date”) + ylab(“Temperature (C)”) + ggtitle(“Temperature over time”)+ theme(axis.title.x = element_text(face=“bold”, size=28), axis.title.y = element_text(face=“bold”, size=28), axis.text.y = element_text(size=20), axis.text.x = element_text(size=20), legend.text =element_text(size=20), legend.title = element_text(size=20, face=“bold”), plot.title = element_text(hjust = 0.5, face=“bold”, size=32))\n#more than one axis#### #for 1:1 transformation data (anything you can use a function to make on a similar #scale) #can add easily but not get scale ggplot(airquality, aes(x =Date,y =Temp)) + geom_point(size = 3, col = “orange”) + geom_line() + geom_point(aes(y=Wind)) + xlab(“Date”) + ylab(“Temperature (C)”) + ggtitle(“Temperature over time”)+ theme(axis.title.x = element_text(face=“bold”, size=28), axis.title.y = element_text(face=“bold”, size=28), axis.text.y = element_text(size=20), axis.text.x = element_text(size=20), legend.text =element_text(size=20), legend.title = element_text(size=20, face=“bold”), plot.title = element_text(hjust = 0.5, face=“bold”, size=32))\n#manually scale data and get secondary axis #have to aes to make tranformation (not aes_string) #put colour in quotes in aes to force legend ggplot(airquality, aes(x =Date,y =Temp)) + geom_point(aes(col =“Temp”), size = 3) + geom_line(col=“orange”) + geom_point(aes(y=Wind+50, col = “Wind speed”)) + scale_y_continuous(sec.axis = sec_axis(~.-50, name = “Wind (mph)”)) + xlab(“Date”) + ylab(“Temperature (C)”) + ggtitle(“Environmental measurements over time”)+ theme(axis.title.x = element_text(face=“bold”, size=28), axis.title.y = element_text(face=“bold”, size=28), axis.text.y = element_text(size=20), axis.text.x = element_text(size=20), legend.text =element_text(size=20), legend.title = element_text(size=20, face=“bold”), plot.title = element_text(hjust = 0.5, face=“bold”, size=32))\n#outliers and bad fits####\ngood_fit_x &lt;- runif(100, 1, 50) good_fit_y &lt;- rnorm(100,25,2) good_data &lt;- data.frame(source = “good”, x=good_fit_x, y=good_fit_y) bad_fit_x &lt;- runif(10, 20, 30) bad_fit_y &lt;- rnorm(10,95,1) bad_data &lt;- data.frame(source = “outlier”, x=bad_fit_x, y=bad_fit_y) all_data &lt;- rbind (good_data, bad_data)\n#just points#### ggplot(all_data, aes(x =x,y =y)) + geom_point(aes(color=source), size = 3) + xlab(“x”) + ylab(“y”) + ggtitle(“Outliers can impact data”)+ theme(axis.title.x = element_text(face=“bold”, size=28), axis.title.y = element_text(face=“bold”, size=28), axis.text.y = element_text(size=20), axis.text.x = element_text(size=20), legend.text =element_text(size=20), legend.title = element_text(size=20, face=“bold”), plot.title = element_text(hjust = 0.5, face=“bold”, size=32))\n#curve and scatter#### ggplot(all_data, aes(x =x,y =y)) + geom_point(aes(color=source), size = 3) + geom_smooth(se = F) + xlab(“x”) + ylab(“y”) + ggtitle(“Outliers can impact data”)+ theme(axis.title.x = element_text(face=“bold”, size=28), axis.title.y = element_text(face=“bold”, size=28), axis.text.y = element_text(size=20), axis.text.x = element_text(size=20), legend.text =element_text(size=20), legend.title = element_text(size=20, face=“bold”), plot.title = element_text(hjust = 0.5, face=“bold”, size=32))\n#just curve#### ggplot(all_data, aes(x =x,y =y)) + geom_smooth(se = F) + xlab(“x”) + ylab(“y”) + ggtitle(“Outliers can impact data”)+ theme(axis.title.x = element_text(face=“bold”, size=28), axis.title.y = element_text(face=“bold”, size=28), axis.text.y = element_text(size=20), axis.text.x = element_text(size=20), legend.text =element_text(size=20), legend.title = element_text(size=20, face=“bold”), plot.title = element_text(hjust = 0.5, face=“bold”, size=32))\n#skewed left with measures of central tendency#### ##weird issues with margins and legends par(mar = c(rep(4,4))) birds &lt;- rbeta(10000,70,5) hist(birds, main=“Weight of Westchester cardinals”, xlab = “Weight (g)”, ylab = “Frequency (#)”, col = “red”, cex.lab=label_size, cex.axis=1.25, cex.main=title_size, cex.sub=label_size) abline(v=mean(birds), col=“yellow”, lwd = 4) abline(v=median(birds), col=“green”, lwd = 4) #no built in mode function…. # Create the function. getmode &lt;- function(v) { uniqv &lt;- unique(v) uniqv[which.max(tabulate(match(v, uniqv)))] }\nabline(v=(getmode(birds)), col=“blue”, lwd = 4) legend(“topleft”, legend = c(“mean”, “median”, “mode”), fill=c(“yellow”, “green”,“blue”), cex = 1.5, bty = “n”, x.intersp = .1, y.intersp = .5)\n#bimodal data with measures of central tendency##### par(mar = c(rep(2,4))) putnam &lt;- c(rnorm(100,20,4),rnorm(100,40,4)) hist(putnam, main=“Weight of Westchester woodpeckers”, xlab = “Weight (g)”, ylab = “Frequency (#)”, col = “orange”, cex.lab=label_size, cex.axis=1.25, cex.main=title_size, cex.sub=label_size, probability = T) lines(density(putnam), col = “black”, lwd = 4) # add a density estimate with defaults abline(v=mean(putnam), col=“red”, lwd = 4) abline(v=median(putnam), col=“green”, lwd = 4) abline(v=(getmode(putnam)), col=“blue”, lwd = 4) legend(“bottomright”, legend = c(“mean”, “median”, “mode”), fill=c(“red”,“green”,\n                                                                \"blue\"), cex = 1.5,\n   bty=\"n\", x.intersp = .1, y.intersp = .5)\n#illustrate variance#### #add sample # iris$sample &lt;- 1:nrow(iris)\n#just scatter plot\nggplot(iris[iris$Species == “setosa”,], aes(sample,Sepal.Length)) + geom_point(size = 3) + ylab(“Sepal Length (cm)”)+ggtitle(expression(paste(“Sepal Length in”, italic(“Iris setosa”))))+ theme(axis.title.x = element_text(face=“bold”, size=28), axis.title.y = element_text(face=“bold”, size=28), axis.text.y = element_text(size=20), axis.text.x = element_text(size=20), legend.text =element_text(size=20), legend.title = element_text(size=20, face=“bold”), plot.title = element_text(hjust = 0.5, face=“bold”, size=32))\n#add mean ggplot(iris[iris\\(Species == \"setosa\",], aes(sample,Sepal.Length)) + geom_point(size = 3) + ylab(\"Sepal Length (cm)\")+ggtitle(expression(paste(\"Sepal Length in \", italic(\"Iris setosa\"))))+ geom_hline(yintercept = mean(iris[iris\\)Species == “setosa”, “Sepal.Length”]), color = “blue”, size = 2) + annotate(“text”, label = “mean”, x = 20, y = 4.9 , size = 8, color = “blue”) + theme(axis.title.x = element_text(face=“bold”, size=28), axis.title.y = element_text(face=“bold”, size=28), axis.text.y = element_text(size=20), axis.text.x = element_text(size=20), legend.text =element_text(size=20), legend.title = element_text(size=20, face=“bold”), plot.title = element_text(hjust = 0.5, face=“bold”, size=32))\n\n\n#add segment for each point segment_data = data.frame( x = 1:50, xend = 1:50, y\niris[iris\\(Species == \"setosa\", \"Sepal.Length\"], yend = mean(iris[iris\\)Species == “setosa”, “Sepal.Length”]) )\nggplot(iris[iris\\(Species == \"setosa\",], aes(sample,Sepal.Length)) + geom_point(size = 3) + ylab(\"Sepal Length (cm)\")+ggtitle(expression(paste(\"Sepal Length in \", italic(\"Iris setosa\"))))+ geom_hline(yintercept = mean(iris[iris\\)Species == “setosa”, “Sepal.Length”]), color = “blue”, size = 2) + annotate(“text”, label = “mean”, x = 20, y = 4.9 , size = 8, color = “blue”) + annotate(“text”, label = “square each red line and find average”, x = 25, y = 5.5 , size = 8, color = “red”) + geom_segment(data = segment_data, aes(x = x, y = y, xend = xend, yend = yend), color= “red”, size = 1.1) + theme(axis.title.x = element_text(face=“bold”, size=28), axis.title.y = element_text(face=“bold”, size=28), axis.text.y = element_text(size=20), axis.text.x = element_text(size=20), legend.text =element_text(size=20), legend.title = element_text(size=20, face=“bold”), plot.title = element_text(hjust = 0.5, face=“bold”, size=32))\n#transformations####\nsample_data &lt;- data.frame(x = rnorm (1000, 1, 1)) sample_data\\(x_add &lt;- sample_data\\)x+5\nggplot(sample_data) + geom_histogram(aes(x =x, fill=“x”), se = F) + geom_histogram(aes(x = x_add, fill=“x+5”), se = F)+ labs(fill=“Data”)+ xlab(“x”) + ylab(“y”) + theme(axis.title.x = element_text(face=“bold”, size=28), axis.title.y = element_text(face=“bold”, size=28), axis.text.y = element_text(size=30), axis.text.x = element_text(size=30), legend.text =element_text(size=30), legend.title = element_text(size=20, face=“bold”), plot.title = element_text(hjust = 0.5, face=“bold”, size=32))\nsample_data\\(x_multiply &lt;- sample_data\\)x*5\nggplot(sample_data) + geom_histogram(aes(x =x, fill=“x”), se = F) + geom_histogram(aes(x = x_multiply, fill=“x*5”), se = F)+ labs(fill=“Data”)+ xlab(“x”) + ylab(“y”) + theme(axis.title.x = element_text(face=“bold”, size=28), axis.title.y = element_text(face=“bold”, size=28), axis.text.y = element_text(size=30), axis.text.x = element_text(size=30), legend.text =element_text(size=30), legend.title = element_text(size=20, face=“bold”), plot.title = element_text(hjust = 0.5, face=“bold”, size=32))\n#shift them left summary(birds) length(birds[birds &lt; .9]) birds[birds &lt; .9] &lt;- birds[birds &lt; .9] - .2 hist(birds, main=“Weight of Westchester cardinals”, xlab = “Weight (g)”, ylab = “Frequency (#)”, col = “red”, cex.lab=label_size, cex.axis=1.25, cex.main=title_size, cex.sub=label_size) abline(v=mean(birds), col=“yellow”, lwd = 4) abline(v=median(birds), col=“green”, lwd = 4) abline(v=(getmode(birds)), col=“blue”, lwd = 4) legend(x=.75, y= 1000, legend = c(“mean”, “median”, “mode”), fill=c(“yellow”,“green”,\n                                                                \"blue\"), cex = 1.5,\n   bty=\"n\", x.intersp = .1, y.intersp = .5)\n#categorical data#### head(iris) iris\\(random &lt;- runif(1:nrow(iris)) iris\\)LL &lt;- 0 iris\\(LL[iris\\)random &gt; .7] &lt;- 1\nggplot(iris[iris\\(Species == \"setosa\", ], aes(LL)) + geom_histogram(size=3) + xlab(\"Genotype score\")+ ylab(\"Frequency\")+ ggtitle(\"Genotype score in an iris species\")+ geom_vline(xintercept = mean(iris[iris\\)Species == “setosa”, “LL”]), color = “blue”) + annotate(“text”, label = “proportion”, x = .25, y = 20 , size = 8, color = “blue”) + theme(axis.title.x = element_text(face=“bold”, size=28), axis.title.y = element_text(face=“bold”, size=28), axis.text.y = element_text(size=20), axis.text.x = element_text(size=20), legend.text =element_text(size=20), legend.title = element_text(size=20, face=“bold”), plot.title = element_text(hjust = 0.5, face=“bold”, size=32))\n\n\n\n\n\nReferences\n\nGirdner, Scott F., Andrew M. Ray, Mark W. Buktenica, David K. Hering, Jeremy A. Mack, and John W. Umek. 2018. “Replacement of a Unique Population of Newts (Taricha Granulosa Mazamae) by Introduced Signal Crayfish (Pacifastacus Leniusculus) in Crater Lake, Oregon.” Biological Invasions 20 (3): 721–40. https://doi.org/10.1007/s10530-017-1570-6.\n\n\nSagarin, Raphael D., James P. Barry, Sarah E. Gilman, and Charles H. Baxter. 1999. “Climate-Related Change in an Intertidal Community over Short and Long Time Scales.” Ecological Monographs 69 (4): 465–90. https://doi.org/10.2307/2657226."
  },
  {
    "objectID": "content/additional_resources.html",
    "href": "content/additional_resources.html",
    "title": "Additional resources",
    "section": "",
    "text": "The class now includes\n\nwebsite (https://sites.google.com/view/biostats/home) housing slides and associated material\ntutorials for many lessons using Swirl\n\ndeveloped with support of a QUBES working group\n\nthis book!"
  },
  {
    "objectID": "content/additional_resources.html#class-related-materials",
    "href": "content/additional_resources.html#class-related-materials",
    "title": "Additional resources",
    "section": "",
    "text": "The class now includes\n\nwebsite (https://sites.google.com/view/biostats/home) housing slides and associated material\ntutorials for many lessons using Swirl\n\ndeveloped with support of a QUBES working group\n\nthis book!"
  },
  {
    "objectID": "content/additional_resources.html#other-resources",
    "href": "content/additional_resources.html#other-resources",
    "title": "Additional resources",
    "section": "Other resources",
    "text": "Other resources\nAs noted in the introduction, there are many, many resources that may assist you in your quest to learn statistics and R. Relevant ones are noted throughout the book and listed here."
  }
]